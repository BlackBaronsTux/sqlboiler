// Code generated by go-bindata. DO NOT EDIT.
// sources:
// override/templates/17_upsert.go.tpl
// override/templates/singleton/mssql_upsert.go.tpl
// override/templates_test/singleton/mssql_main_test.go.tpl
// override/templates_test/singleton/mssql_suites_test.go.tpl
// override/templates_test/upsert.go.tpl

package driver

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templates17_upsertGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\xdd\x6e\xdb\xb8\x12\xbe\x96\x9e\x62\x1a\x1c\x34\xd2\x39\x8e\x72\xf6\x36\x0b\x5f\x24\x4d\xdb\x2d\xda\x64\xdd\xba\xd9\x02\x1b\x04\x01\x2d\x8d\x6c\x22\x34\xa9\x52\x94\x53\xaf\x57\xef\xbe\x18\x92\xb2\x64\xc7\x8e\x9d\x76\xb3\xd8\x8b\x20\x11\x39\x9c\x19\x7e\xdf\x70\x7e\xb2\x58\x1c\xc1\x7f\x98\xe0\xac\x84\x93\x3e\x24\xa7\xf4\x17\x96\xc9\x67\x36\x12\x08\xee\x57\x72\xc9\xa6\x58\xd7\xa1\x15\x2d\xd3\x09\x4e\x99\xdb\xa6\x03\xad\x04\xfc\x09\xc9\xb0\xdd\xb5\x07\x78\x0e\xc9\x69\x96\xbd\x15\x6a\xc4\x04\x1c\xd5\x75\x78\x7c\x0c\x57\x45\x89\xda\xbc\x05\x66\x0c\x4e\x0b\x53\x02\x93\xc0\x25\xad\xf5\x80\xc9\x0c\x32\x85\x76\xad\x2a\x32\x66\x10\x94\x06\x3e\x96\x4a\x23\x28\x09\xa9\x92\xb9\xe0\xa9\x49\xc2\xbc\x92\x29\x44\x0a\xfe\xbb\x58\x38\xff\x93\xab\x62\xc8\xe5\xb8\x12\x4c\xd7\x75\xdc\x58\x89\xac\x13\x52\x19\x48\x2e\xd5\x2b\x25\x0d\x7e\x33\x75\x9d\x9a\x6f\xa4\x8a\x3e\x12\xbf\xd8\x83\xc5\x02\x65\x46\x4e\x7a\xcb\xaf\x94\xa8\xa6\xb2\xec\x79\xe7\xfc\x27\x8c\x14\x17\x89\xff\x88\x01\xb5\x56\x1a\x16\x61\xa0\xd1\x54\x5a\x82\x4a\x9c\x61\x67\xb7\x6b\xd3\x9e\x7b\x8b\xe6\xfc\x2c\x8a\x17\x0b\x14\x25\x5a\x3f\x7a\xd0\x6c\x78\x49\xbf\x2f\xb3\xba\xee\x3d\xea\x49\x1c\xd6\x61\xb8\x74\x3a\x74\x70\x13\x80\x1d\xc8\xe9\xcf\x01\x93\x3c\x5d\x03\x7f\xf0\x63\xe8\x83\xd5\x59\xd2\x9a\x05\x60\x6f\x3a\x06\xcf\xcd\xc7\x22\x0c\x78\x4e\x4e\x51\x74\xfe\x93\x64\xfc\x6c\x8d\xbe\xe8\x83\xe4\x82\xbc\x08\x0a\x82\x28\xb2\xfa\xbe\x68\x56\xbc\xd6\x3a\x42\xad\xe3\x38\x0c\xea\x4d\xc4\x6d\x61\x6a\x13\x51\x50\x95\x5c\x8e\xe9\x1b\xbf\x61\x5a\x19\xa5\x9f\xf2\x70\x3a\xaa\x8b\xef\x63\x71\xf0\x10\x4f\x72\xc4\x61\xf7\xda\xbb\xd4\x41\xf5\x21\xb5\xad\xb8\x5f\xea\x9c\xda\x8d\xf5\xfe\x94\x6f\x88\xb3\x6e\x5c\x91\x1b\xcf\x47\xeb\x12\xe8\xbf\x9d\xc2\xfd\x68\xfa\x77\xb1\xb4\x4c\x94\x3c\x07\x05\xfd\x16\x50\x9f\x38\xed\x7e\x99\x5c\xe2\x7d\x74\xb0\x58\x24\x83\xbb\xb1\x2b\x3b\x27\x20\x15\x2c\x16\x2b\xa5\x08\x0a\xad\x66\x3c\xc3\x0c\x72\xa5\xa1\xb2\xb7\x3d\xb0\x0c\x84\x01\x55\x29\x42\x5b\x10\x7e\x07\x86\x4f\xb1\x34\x6c\x5a\xdc\x3a\xa9\xdb\x09\x8a\x02\xf5\x01\x24\x50\x3b\xe9\x36\x4a\x7e\x51\xea\xae\xb4\xd4\xad\xc4\x53\xa6\xce\x30\x57\x1a\x1d\xa8\x56\x68\xef\xe0\x7a\x18\x3e\xed\x6d\xc9\x5d\xeb\xad\xc5\x32\x0c\x03\xf9\xc7\x39\xe6\xac\x12\xc6\x96\xe2\xaf\x15\x6a\x8e\x65\x72\xa9\xe4\xef\xa8\x95\xdf\x1a\x22\xd1\xea\x49\x3f\x57\xf7\xb2\xa5\xdd\x23\xfd\x85\x9b\x89\x17\xee\x81\x8a\xc3\x30\x38\x3e\x86\xb3\x8a\x8b\x0c\x52\x96\x4e\x10\xee\x70\x0e\x5c\x1e\x09\x2e\x11\xaa\xb1\xe0\x62\x0e\x47\x30\x9d\x97\x5f\x05\xcc\x4a\x28\xe8\x77\xa1\xd5\x48\xe0\xb4\x0c\x83\x51\x95\x93\x33\xa5\xd1\x53\x26\xc7\x02\x29\x35\x9e\x55\x79\x8e\x3a\x8a\xed\x6e\xf2\x45\x73\x83\x43\xa3\xb9\x1c\x47\xa5\xd1\xa9\x92\xb3\xe4\x9d\x51\x2c\x5a\x89\x8d\xe4\x3d\x97\x19\x3d\x12\x22\xec\xb6\x07\x29\x69\xd5\x4c\x8e\x71\x35\x86\x28\x5e\x4a\x0b\xd4\xba\xee\xd4\xf2\xdb\x2e\x9f\xcd\x0d\x46\x87\xc9\xe1\x2e\x37\x56\x62\xf2\x11\x37\x56\xe5\xbe\xc7\x8d\x87\x3a\x3b\x8c\x3e\xa2\x8b\x08\x39\xe9\x03\xed\xfa\x8d\x38\x0c\x5a\xc4\x07\x55\x83\xf8\xa8\xca\x63\x1b\xb3\x1b\xf9\x77\xf1\xf9\x8a\x38\xbe\xa8\x4c\xf2\xe9\x83\x4a\xef\x48\x93\x65\xbd\xe7\xc8\xcf\xc8\xd0\xee\xf3\xd7\x77\x38\xbf\xd9\xdb\xd0\x95\x14\xce\x54\x18\xcc\x98\xb6\x01\x6f\x1f\x73\x68\xdf\xd1\x0b\x6f\x98\x00\x68\xfa\x0c\x8d\x86\x1c\x59\x85\xfc\x5d\xe7\x8b\xc2\x3c\x0c\x82\x6d\x1e\x34\x09\x67\xb7\x48\xf7\x35\xec\x27\xad\x2a\xd3\x3d\xd0\x52\x48\x9f\xf1\xf2\x12\xd0\x7d\x14\x43\xea\x17\xa6\x85\xc0\x29\x4a\x13\x35\xb7\xdc\x6d\xeb\xb4\x32\x8a\x54\x52\xe4\xf0\x1e\xcc\xd6\xa3\xd1\x82\x46\x20\xb6\xa6\x28\xdb\x30\x2e\xcb\x53\x39\xdf\x96\x08\x06\x9a\x4f\x99\x9e\xbf\xc7\xf9\x32\x31\xcf\x62\x78\xf9\xf2\x69\x5a\x36\xa5\x93\x59\xec\x3c\x6a\x31\x60\x45\x81\x32\xf3\x57\xbe\x3e\xe1\x37\x4d\x11\xb8\xe6\xff\xfb\xe9\xe4\x26\x49\x12\xba\x1f\x45\xb9\xfd\xe1\x39\x08\x94\x5e\x3c\xa6\x2a\xf0\x7f\xa7\x71\x67\x11\xa8\xa4\x1d\x39\x8c\xf2\xe9\x7e\xbd\x24\xf4\x20\x55\x95\xc8\x6c\x52\x1e\xd9\x6c\xe7\x7d\x4c\xed\x3d\x40\xf0\xd2\x96\x08\x5b\x23\xc8\xdc\x3a\x81\x17\xa8\xc7\x18\x69\x7c\x12\x71\x3f\xaa\xc7\x23\x4b\x4f\x27\xf0\x25\xff\xa4\xbf\x96\x11\xaf\x3a\x5f\x3f\xfe\x2e\x1e\x06\x87\x0f\x6b\x6f\x7e\x7b\x58\x3b\x81\xfd\xd1\x69\xe9\x76\x27\x9f\x99\x6e\xef\xff\x46\xba\x6d\x0a\x4a\xa8\xa2\xce\xa1\xad\xac\xb6\x28\xba\x64\xf6\x91\xb6\x2e\x86\xc3\x8f\x1f\xa2\x8c\x33\x81\xa9\xe9\xc1\xc1\x9a\xc9\x83\xad\x57\xdf\xf0\xe0\x1a\xb0\x3a\x19\xcf\x22\x72\x3f\xe1\x06\xc9\xb9\xf6\xed\x3c\x55\xa9\x7f\x53\x1b\x34\x2d\x97\x1a\xbb\x56\x74\x79\xff\x19\x13\x15\x5e\xb0\xa2\xe0\x72\xdc\xb3\x69\xba\x83\x05\x97\x99\xdf\xda\xe6\xd0\xe7\x79\xb1\x9d\xfd\xa5\xda\xa5\x0f\xb1\xe3\x7f\xad\xfd\x59\xe9\x7f\xba\x29\x81\x00\x22\x41\x1f\x20\xce\x63\x8d\xe6\xb9\xfd\xb5\xc4\x04\x1b\x5d\x5d\xf5\xb5\xc9\x61\xb5\x2d\x73\xa2\xb2\x2f\x55\x63\x4e\xc1\x92\xbc\x93\x19\xd7\x98\x9a\xa8\x59\xf8\x8d\x24\x7e\xcd\x23\x45\xcd\xc6\x8c\x89\x95\x96\xce\x6e\x96\x6f\xb4\x9a\x36\x57\xb0\x0a\x7d\x8d\x5e\xe1\x29\x76\x35\xd5\x79\x52\xc2\xf5\x0d\x97\x06\x75\xce\x52\x5c\xb8\x36\x95\xb0\x5b\x07\xab\x03\x64\x73\xb0\x35\x3e\x30\x7a\xbb\xe9\x8e\x0e\x77\x53\x9e\xbb\x36\xfe\x1c\x47\xd5\xf8\x42\x65\x68\xb5\xde\xf6\xe0\x16\xfa\x90\x4f\x4d\xf2\xa6\xd0\x5c\x1a\x21\xa3\x56\xcc\xb6\x38\xba\x51\x69\x5f\x5d\xbc\xf7\x21\xc2\xaa\xb5\xbd\xe3\x76\x6b\x03\x8e\xeb\xdd\x03\x17\x29\xd4\x7e\x27\xf6\x5d\x7f\x52\xf7\x51\xc7\x17\x67\x83\x9e\x46\x32\x4c\x99\x8d\x3c\x82\xc8\x3f\x2b\x37\x10\x6d\xd7\xe4\x4d\x45\xb6\xd9\x7f\x8a\x56\x3f\x15\x2e\x23\xad\xdf\x87\xf2\xab\x48\x5e\x6b\x7d\xa9\x3e\xa9\x7b\xd7\x21\x7a\x8b\x14\x82\xc7\xc7\x30\x50\xa5\x19\x6b\x2c\xed\x54\x28\x0f\x8d\x0f\x03\x60\x72\x6e\x26\x34\x3e\xde\x4f\x50\x82\x99\xa0\xc6\xc3\x92\xc6\x24\x97\x20\x7c\x9c\x82\xbd\xc8\x76\x98\x6e\x9b\x37\x65\xef\x47\xa3\xdd\x66\x94\xd6\x41\x79\x78\x6e\x37\x26\xab\x10\xb4\x03\xd6\xc6\xc1\x88\x4a\x02\x8d\xd6\x34\x57\xbb\x34\xfc\x84\xc2\x70\xd0\x06\x4f\xb7\xf3\xdc\xaf\x95\x6d\x5a\xe6\x3d\xc4\x6d\x8b\x0c\x7d\x77\xdd\xbd\x0d\x2c\x5b\xe5\xe0\x91\xe1\x73\xf9\x9f\xc4\x4c\x9d\xe6\x06\xf5\x3e\x83\xe7\x63\xff\x3d\xb3\x83\xa8\x1f\x35\x97\x34\x7a\x23\x92\x8b\xee\x10\x5a\x87\x7f\x05\x00\x00\xff\xff\x9c\xba\xec\xfa\x10\x16\x00\x00")

func templates17_upsertGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templates17_upsertGoTpl,
		"templates/17_upsert.go.tpl",
	)
}

func templates17_upsertGoTpl() (*asset, error) {
	bytes, err := templates17_upsertGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/17_upsert.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x78, 0xbd, 0xda, 0x59, 0x29, 0x9e, 0x23, 0x58, 0xfc, 0xf1, 0xbd, 0xcb, 0xdb, 0x97, 0xd4, 0x11, 0x7, 0xac, 0x43, 0xdf, 0x68, 0x44, 0x2, 0x1f, 0x72, 0xf3, 0x8, 0xb3, 0xf2, 0x1e, 0xc4, 0xf2}}
	return a, nil
}

var _templatesSingletonMssql_upsertGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x54\x5d\x6f\xda\x3c\x14\xbe\x8e\x7f\xc5\x79\x2d\x55\x8a\x55\x2b\x7d\x7b\xbb\x8a\x49\xac\x64\x2d\x13\x0d\xd0\x84\xed\x82\xa2\xca\x90\x13\x6a\x29\x18\xe4\x0f\xb4\x6a\xea\x7f\x9f\x9c\x8f\x41\xbb\xd0\x69\xbb\x81\xd8\x3e\xe7\xc9\x79\x3e\x9c\x8b\x0b\x58\x3a\x59\xe6\xb3\x9d\x41\x6d\xa7\x0e\xf5\xf3\x5d\x9a\x4e\x47\xf5\xae\x01\x01\x7e\x61\xac\xb0\xb8\x41\x65\xc1\x58\x2d\xd5\x1a\x9c\xf1\xbf\xf6\x09\xc1\x55\x8d\x03\x61\x05\xec\xf4\x76\x2f\x73\xcc\x23\x52\x38\xb5\xea\xc6\x0d\x73\x29\x20\xd7\x72\x8f\xda\x44\x03\x29\x4a\x5c\x59\x0e\x56\x2c\x4b\x4c\xc4\x06\x1b\x7c\x0e\x3b\x2d\x37\x42\x3f\x73\x70\xbb\x5c\x58\xe4\x20\x95\x07\x82\xf9\xa2\xad\xd8\x3a\xbb\x73\x87\x0d\xd6\x8e\xf6\x83\x04\x4d\x6d\xcf\x6f\x6d\x84\x5a\x97\x18\x0d\x73\x54\x76\xea\xb6\x16\xd3\x52\xae\xd0\x8f\x11\x8d\xa6\x1c\xfc\xff\xfd\xb4\x85\x67\x84\x04\x4b\x57\xc0\x87\xe3\xd6\x1b\xb4\x9f\x5c\x51\xa0\x0e\x19\x09\x72\x2c\x50\x1f\x1d\x4e\x5c\x7b\xb8\x74\x85\x6f\x37\x56\x68\x3b\x54\x39\x7e\xf7\x28\x97\x84\x04\x8f\x1c\x1e\xa1\x07\xc5\xc6\x46\x9f\x77\x5a\x2a\x5b\xf8\x5a\x0e\xf4\x2e\xbe\xbf\x89\x61\x98\x64\x63\x38\x33\x20\x0c\xcc\xed\xe2\x41\xd1\x23\x39\xd8\x3b\xdd\xb3\x74\x98\xdc\x40\x98\xc6\xa3\xf8\x3a\x83\x33\xc3\x2a\x04\xb3\x80\x70\x7e\x66\x16\xcc\x03\x91\x20\x38\x9a\xb4\x14\x2b\x7c\xda\x96\x39\x6a\x53\xd1\x9f\x19\xac\xe6\x3c\x3e\xe0\x50\xa2\x0a\x1b\xf1\x19\x87\x03\x1b\x0e\x97\xac\x01\x94\x6a\x6d\xa2\x2f\x5b\xf9\xab\x90\x37\xda\x87\xb5\x9a\xec\x9c\x72\x7a\x7e\xb4\x35\x9a\x32\xd6\x45\xa5\x61\x32\x4e\x20\xa4\x8c\x04\xc5\x56\x83\xe4\xb0\xf7\xc2\x69\xa1\xd6\xd8\xa6\xc0\x7b\x1a\xc8\x02\x24\xfc\xd7\x83\xff\xab\xd5\x49\x30\xe8\x27\x03\xf0\x68\xc1\x0b\xe9\xa8\x6a\xd5\x9b\x9b\x45\xe4\x75\x82\x9e\x57\xbd\x7a\xa4\x1c\xf6\x1c\xf6\x8c\xf8\xce\x53\xf0\x5e\xd7\x37\x36\x9f\xf7\x5e\x89\xd6\xe5\x78\xd3\xfc\xed\x36\x4e\xe0\xae\x9f\x5d\xdf\xc6\x03\xc8\xfc\x82\xbe\xeb\xf0\x64\xd0\xcf\x62\x48\x63\x6f\x6f\x15\x8c\x83\x9b\x29\xda\x89\xd0\x62\xe3\x53\x62\xc2\xd7\x5a\xbf\xb5\xe3\xb5\x8d\xf5\x85\x62\xdd\x24\x9a\xc3\x3f\x71\x48\xc6\xd9\x5f\xf0\x18\x26\x69\x7c\x9f\x41\xe8\x33\xfa\xb5\x3f\x9a\xc5\x69\xf5\x4c\x7f\x8b\x53\x7d\x09\x39\x50\x2f\xf4\x3f\xa7\xb7\xb9\xca\x6f\xc3\xeb\x49\xc9\xa2\xaa\xa8\x3f\x1d\x0c\x3e\x36\x61\x3a\x39\xf9\x83\x1a\xcf\xb2\xc9\x2c\x83\x9a\x42\x3c\xa8\x82\x72\x45\x5b\x85\x9b\xb9\x6b\x3c\x0e\x74\xc1\x0f\x85\xd4\x47\xfe\x05\xb0\x34\xd8\xfd\x92\xe6\x1d\x57\xb4\x4a\x1c\x09\x34\x5a\xa7\x15\x2c\x5d\x11\xa5\xb5\x7f\x8c\xbc\x90\x9f\x01\x00\x00\xff\xff\x9a\xb2\x88\x1e\xa1\x05\x00\x00")

func templatesSingletonMssql_upsertGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesSingletonMssql_upsertGoTpl,
		"templates/singleton/mssql_upsert.go.tpl",
	)
}

func templatesSingletonMssql_upsertGoTpl() (*asset, error) {
	bytes, err := templatesSingletonMssql_upsertGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/singleton/mssql_upsert.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xdb, 0x7f, 0x26, 0x59, 0x1c, 0x5a, 0x33, 0xee, 0xf4, 0x4c, 0xd2, 0x8b, 0x86, 0xf6, 0x9c, 0x4f, 0xff, 0xd4, 0x44, 0xbc, 0xf2, 0xc0, 0x2f, 0x4f, 0x5d, 0xd3, 0x7, 0x35, 0xd4, 0xe7, 0xa8, 0x50}}
	return a, nil
}

var _templates_testSingletonMssql_main_testGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x57\xdf\x53\xdb\xc6\x13\x7f\x96\xfe\x8a\xfd\x7a\x26\x89\xc4\x57\x3d\x92\xa6\xd3\x07\x32\x9e\x8c\xb1\x45\xc2\x04\xdb\xc4\x52\x9b\x76\x08\x85\xb3\xb4\x82\x9b\x48\x27\xfb\xee\x04\x71\x29\xff\x7b\xe7\xee\x24\x59\x26\xd8\x0d\x7d\x29\x2f\xd6\xed\x7e\xf6\xf7\xed\xee\x71\x43\x05\x88\xab\xaf\xe3\x28\xfa\x78\xf2\x05\x57\xd0\x07\x81\x57\xf8\x75\x41\xc6\x95\x54\xc3\xb2\x58\xb0\x1c\xbd\x4b\xef\x6d\xe1\xff\x31\x38\x89\xc3\x19\xc4\x83\xc3\x93\x10\xc8\xde\x60\x34\xfa\x2c\xff\x3f\x9c\x4e\xa2\x78\x36\x38\x9e\xc4\x40\xf6\xe0\x68\x3a\x0b\x8f\xdf\x4d\xe0\x43\xf8\x3b\xd9\x7b\x4b\xf6\x3e\xf3\xb7\xb3\xf0\x28\x9c\x85\x93\x61\x18\x91\xbd\x4b\xdf\x75\xd5\x6a\x81\x50\x48\xb9\xcc\x63\x94\x0a\x05\x48\x25\xaa\x44\xc1\x9d\xeb\xa4\xf3\x61\xc9\x39\xe8\xbf\x3d\xb9\xcc\xc9\xe8\x50\xd3\x26\xb4\x40\x43\x93\x4a\x30\x7e\xe5\x3a\xd7\xa5\x54\x00\x1b\xa4\x4a\xa2\x78\x40\x5a\x50\x29\x1f\x90\xa4\xcc\x8b\x32\xc5\x0d\x54\x29\x1a\x5d\x8c\x2b\xd7\x51\x28\xd5\xe8\xd0\x98\xac\x21\xf7\xae\x9b\x55\x3c\x01\xc6\x99\xf2\x7c\xeb\xe6\x98\x32\x0e\x7d\x78\xde\x09\xe3\xee\xbe\x45\x7a\x05\xec\x75\x38\x3e\x48\x54\xd5\xc2\xf3\x01\x85\x28\x85\xd6\xa0\x73\x8e\x42\x58\x82\xeb\x3a\x37\x6c\x81\x82\x44\xa8\x46\x98\xd1\x2a\x57\x5e\xcf\xc8\x13\x99\x5c\x63\x41\x7b\x01\xf4\xd2\x79\xd9\xf3\x77\x00\x6d\x64\x1a\xa9\x44\x85\xbb\xa0\x3a\xe2\x5e\x00\xaf\x7e\x7a\xfd\xda\x77\x5d\xa7\x20\x75\x86\xfb\x60\x25\xde\xa1\x8a\x4c\xe4\x8d\x40\x3a\xe7\xb4\x30\x2a\x0b\x62\x52\xbf\x15\xa9\xb9\x16\x67\xea\xb1\x15\xa7\xb9\x16\x67\x8a\xb4\x15\xa7\xb9\x35\x4e\x97\xa9\x83\x3b\xe6\x9b\xf1\x18\x50\x53\xde\xad\xfa\x9a\x2c\xe9\xb8\x75\xfa\xfb\x70\x43\x73\x4a\x0e\xf1\x8a\xf1\x5f\x69\xce\x52\xaa\x58\xc9\x3d\x9f\xd4\x07\xf4\x5c\xc7\x31\x10\xab\x67\x52\xaa\xb0\x58\xa8\x95\xb7\x33\xae\x00\x36\x8f\x4f\xd3\x61\x73\xd8\xea\xa8\x8f\x8d\x8e\x49\xa9\x3c\xf3\x11\x2e\x2b\x9a\x4b\x6f\x7b\x42\x02\x78\xd9\x2a\xb1\x94\xa7\x7a\xd2\xd4\xbd\x55\xd3\x12\x9e\xa6\xa7\xcd\x7a\xab\x68\x4d\x71\x1d\x9f\x0c\xaf\x31\xf9\xe2\xe9\x9a\xb0\xcc\x74\xc5\xff\xfa\xc0\x59\xae\xfb\xc4\x11\xa8\x2a\xc1\x35\xd5\x75\xee\x5d\xd7\xd9\xdf\x87\xa1\x40\xaa\x10\x28\x08\xca\xd3\xb2\x60\x7f\x62\x0a\xe9\x1c\xb4\x6b\x44\xdf\x82\x4e\x07\xf7\xd7\x18\x12\x29\x3a\xcf\xd1\x32\xbc\xe6\xd2\x77\x8c\xf6\xa1\x20\xa9\x28\x17\xb1\x11\xf7\xfc\x37\xbb\x5d\xe9\x8a\x25\xc6\xa3\xef\x14\x74\x1d\x0b\x1f\x16\x29\x1c\xf4\x01\xbf\x62\x42\x86\x65\x51\x50\x9e\x7a\x3d\xb9\xcc\x93\x22\xd5\x5d\xfc\x43\xd4\x0b\xc0\xf6\x9b\x3e\xfd\x62\x4e\xfa\x42\xe9\xd3\xa9\x39\xe9\xee\xd0\xa7\xd4\x9c\xd6\x61\xeb\xa0\xb2\xc0\x78\x71\xd0\x87\x52\x92\xe9\x02\xb9\xd7\x33\xf1\xcb\x0b\x3b\x52\x88\x5c\xe6\xba\x69\x76\x65\xbc\x14\x92\x7c\x12\x74\xe1\xa1\xd0\x56\x33\xca\x72\x4c\x41\x95\x50\x2e\x90\xc3\x37\xea\x20\x63\xb9\x99\x12\x3a\xc6\x14\x33\x14\x90\x91\x61\x5e\x4a\x34\xb5\x6d\xa3\x26\x91\x4a\xcd\xf4\xe4\x78\x7b\xf4\x01\x57\x23\x94\x4a\x94\x2b\x14\x5e\x67\x0b\x05\x90\x6d\xd4\xa6\x2b\x4d\x85\xda\x99\xe5\xad\x7e\x4b\x2d\x0a\x36\xc7\x90\xd8\x9c\x37\x0e\x3f\x62\xe9\x13\x65\x8f\x19\xca\x0a\x45\x4e\x05\xe3\x2a\xe7\xda\x82\xff\x7d\xb6\x6f\x29\x53\x90\x95\x62\x8b\xf9\x5a\x03\x67\xf9\x8e\x2d\x22\xf3\x71\x99\xa2\x67\x66\x9c\x5d\x4e\x7e\xfd\xab\x1d\x93\xb7\x4c\x25\xd7\x60\xb8\x77\xae\x93\x50\x89\xf5\x32\x38\x58\xbb\x68\x09\x0d\x37\xa3\xb9\xdc\x64\x5b\x8a\xa9\x9f\xde\x19\x5d\x56\xca\xa4\x2e\x79\x4f\x3b\xbc\xd5\xc7\xcd\x56\x58\x2f\x3c\x7d\x3f\x0e\xfa\xa0\x73\x17\x2d\x74\xf2\x32\xef\xd2\x75\x86\xb3\x70\x10\x87\x30\x1a\xc4\x83\xc3\x41\x14\xc2\x33\xf9\xc6\x75\xde\x4d\x5d\xc7\x3e\x34\xd6\xf4\xb3\x57\xe7\xd2\x75\xa2\x30\x86\x59\x38\x18\x5d\x0c\xa7\xe3\xf1\x71\x1c\x87\xa3\x8b\x68\x32\x38\x8d\xde\x4f\x63\x98\x4e\x8c\xe8\xe5\xc3\x56\x68\xdc\x2f\x88\xa8\xf8\xb0\x48\x3d\xb9\xcc\x03\x78\x7a\xa3\xf9\xdb\x63\xee\x4e\x8d\x75\xc4\xfb\xfb\x10\x31\x9e\x20\x8c\x23\x88\x3e\x9e\xc0\x8f\x2f\x5f\xfd\x0c\x4c\x41\x42\x39\xcc\x11\xd2\x92\x23\xdc\x32\x75\x6d\x90\xa3\xd9\xf4\x74\x1d\xee\x19\x1c\x1f\x41\xf8\xdb\x71\x14\x47\x70\x0e\x77\x90\x52\x45\xe7\x54\xe2\x85\x9e\x71\xf0\xd7\xfa\x2c\x39\x5d\xc8\xeb\x52\x59\xc6\x3d\x9c\x41\x40\x08\xe1\x70\x0e\x67\x6f\xce\xb7\x25\xbd\xd5\xed\x45\xe1\x49\x38\x8c\xcd\xe4\x84\xa3\xd9\x74\x0c\x72\x25\x49\xa3\x5c\x82\xeb\x38\x9f\xde\x87\xb3\xd0\x02\xfa\xf0\xe2\x99\x7c\xa1\x6f\xfb\xa6\xb3\xcf\xe4\x23\x79\xff\x0f\xaa\xa0\x90\x8a\xb4\xbc\xe5\xdd\x1a\xb0\x4c\x0f\x75\xfb\xa8\xec\x74\x70\x43\x6b\xa7\x53\x77\x02\x1c\x3c\x71\x11\x7c\x5f\xef\x36\x61\xeb\xd1\x17\x34\xcd\x5f\x37\x6f\x00\x54\x5c\x49\x20\x84\x34\x4d\xdd\x06\x90\x3c\xb2\x24\x6a\x61\x2b\x45\x08\xf1\x0d\xac\x9d\xaa\x56\x87\x24\x13\xbc\x9d\x21\x4d\x51\x58\xa3\x7a\x9a\x4a\x95\x96\x95\xd2\x0a\x9f\xcf\x57\x0a\x25\x39\xac\xb2\xcc\xbc\x5c\x35\xab\x0e\xfe\x1b\x56\xad\x5c\x4b\x6a\xed\xfa\xa3\x25\xda\x91\x69\x85\xbb\x19\xd4\xec\x59\xc5\xff\x61\x7a\x36\xe3\x51\x54\x9c\x33\x7e\x75\xd0\x6b\x33\x63\x83\xf3\x1f\xe0\xad\xf1\xfa\xd5\xe1\xf9\x8f\xb0\x51\x88\x0d\xf6\xbf\x29\x55\x52\x72\x7d\x89\xbc\xfa\x3f\x90\xc0\x56\xc3\xdf\x71\x9f\xda\xcb\x6d\x59\x81\xd1\x6f\xec\x6d\xbe\xf3\x9d\x35\xa2\x4e\xdc\x32\xaf\x97\xb3\xf1\xa0\x17\x40\x2a\xd8\x0d\x0a\x62\xd6\xe0\x61\xc5\xf2\xf4\x63\x85\x62\x55\x87\xd4\x74\x44\xb3\xfa\x1f\x76\x9c\xed\x1e\xfb\x58\xd6\xbf\xf5\x33\xcb\xdf\xb5\xe7\x39\xcb\x83\x6f\xf2\xb3\x19\xc9\xbd\xfb\x77\x00\x00\x00\xff\xff\x53\x20\x2b\xd4\x23\x0e\x00\x00")

func templates_testSingletonMssql_main_testGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templates_testSingletonMssql_main_testGoTpl,
		"templates_test/singleton/mssql_main_test.go.tpl",
	)
}

func templates_testSingletonMssql_main_testGoTpl() (*asset, error) {
	bytes, err := templates_testSingletonMssql_main_testGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates_test/singleton/mssql_main_test.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x38, 0xd8, 0xc5, 0x8c, 0xfa, 0x51, 0x14, 0x22, 0x6b, 0x78, 0xd3, 0x3f, 0x69, 0x7c, 0xfd, 0x96, 0x74, 0xb4, 0x15, 0x9b, 0x5e, 0xa2, 0xc1, 0xd8, 0x8b, 0xc, 0x4a, 0x5d, 0x8f, 0xa5, 0xf9, 0x5d}}
	return a, nil
}

var _templates_testSingletonMssql_suites_testGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\xc1\x0a\xc2\x30\x10\x44\xef\xfd\x8a\xa5\xe4\xd0\x4a\x9b\x0f\x10\x3c\x78\xd4\x83\x88\xb4\x1f\x10\xed\xb6\x04\xe2\x5a\xba\x5b\x10\x42\xfe\x5d\xd2\x46\xe9\xc1\xdb\x0c\x6f\x32\x99\xed\x67\x7a\x40\x83\x2c\xed\xc8\x38\x49\x21\xb0\x13\x64\xb1\x34\xe8\xa6\x04\x9f\x01\x78\x5f\xc3\x64\x68\x40\x50\x96\x3a\x7c\x57\xa0\xc4\xdc\x1d\xc2\xfe\x00\xba\x89\x8a\x43\x48\x39\xdb\x27\xa8\x4f\x7c\x7e\x59\x5a\x30\xd4\x3f\x8e\x8e\xb7\x56\x19\x67\x0d\xc7\x22\xa5\x8f\x51\x22\xaf\x8d\xdf\x96\x8b\x79\xe2\x92\x16\x7d\x9b\xa9\xc8\xbd\x5f\x9f\xe8\x76\xbc\xba\x79\x32\x2e\x84\xbc\x82\x38\xf8\x0f\x59\x2f\x2a\x97\xbf\x90\xba\xed\x8c\xe4\x42\xf6\x09\x00\x00\xff\xff\x11\x5d\x4c\xce\xff\x00\x00\x00")

func templates_testSingletonMssql_suites_testGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templates_testSingletonMssql_suites_testGoTpl,
		"templates_test/singleton/mssql_suites_test.go.tpl",
	)
}

func templates_testSingletonMssql_suites_testGoTpl() (*asset, error) {
	bytes, err := templates_testSingletonMssql_suites_testGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates_test/singleton/mssql_suites_test.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x10, 0xc4, 0x71, 0xaf, 0xd9, 0x16, 0x41, 0x8b, 0x4b, 0xfc, 0xe8, 0xba, 0xfd, 0xfa, 0x4d, 0x2c, 0x1, 0xd1, 0x0, 0xe1, 0xb0, 0x78, 0xee, 0x7f, 0xd0, 0x65, 0xf3, 0xa1, 0x43, 0xba, 0x3c, 0xe7}}
	return a, nil
}

var _templates_testUpsertGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x54\x3d\x6f\xdb\x30\x10\x9d\xc5\x5f\x71\x35\xda\x82\x2a\x14\x06\x5d\x53\x78\xc8\xd7\x10\x14\x35\x8c\x58\x9e\x0b\x46\x3a\x39\x84\x69\x52\x20\x4f\xb5\x5d\x81\xff\xbd\x20\xe5\x24\x4e\x9c\x14\x1e\xda\x21\x83\x2d\x91\x78\xf7\xde\xbd\xfb\x50\xdf\x9f\xc0\x47\xa9\x95\xf4\x70\x36\x06\x71\x1e\xdf\xd0\x8b\x52\xde\x69\x84\xe1\x21\x26\x72\x85\x21\xb0\xa6\x33\x15\x10\x7a\xea\xfb\x21\x42\xcc\xdb\xa9\xee\x9c\xd4\x21\xcc\x5b\x8f\x8e\x38\xc1\x97\x08\x50\x66\x21\xca\x1c\x7a\x96\x91\x98\x4a\x27\xb5\x46\xcd\x73\xc6\x32\xd5\x80\x46\xc3\x1f\x09\xae\xec\xda\xcc\x94\x59\x74\x5a\xba\x10\x2e\xad\xee\x56\xc6\xe7\x30\x1e\xff\x0d\x36\x75\x6a\x25\xdd\xf6\x3b\x6e\x1f\x03\x7a\x96\x65\x24\x66\x4b\xd5\xf2\x51\xfc\x6f\x95\x59\x00\x25\x0f\x6b\x45\xf7\x60\x8d\xde\x42\x3b\xc4\xc1\x12\xb7\x50\x0d\x91\xa3\x9c\x65\x81\xb1\xcc\x23\xd6\xd1\xbf\x93\xa6\xb6\x2b\xf5\x1b\xc5\x04\xd7\x33\xc4\x9a\xe7\x2c\xfb\x25\x1d\xa0\x4b\x3f\xeb\x58\x76\x7a\x0a\xe7\x44\xb8\x6a\x09\xe8\x1e\xe1\x66\x32\xbb\xbe\x2d\xc1\xab\x1a\xc1\x36\x20\x0d\xcc\xa7\xf1\x86\x65\x36\x32\xee\xd5\xea\xc9\x41\x1f\x52\x29\x22\xe9\xbe\xe6\x8c\x5c\x57\x11\x8f\xc9\x14\xf0\xd9\x16\xf0\x46\x01\xae\x2e\xca\x6d\x8b\xbe\x00\x72\x1d\xe6\xdf\x12\xcf\x87\x31\x18\xa5\x77\x85\xb8\x8e\x99\x36\x7c\x34\x37\xa9\x04\x64\x9f\x44\x5e\x4f\x08\x7c\x92\x3e\x83\x4f\x7e\x54\x44\xbe\x5d\x5d\xfa\x5e\x35\x60\x2c\x81\x98\xd8\x4b\x6b\x08\x37\x14\x42\x45\x9b\xe8\xac\x1a\xce\xe2\x42\x56\xcb\x85\xb3\x9d\xa9\x79\xde\xf7\x68\xea\x10\x58\x36\x40\x7e\x74\x9e\xca\x0d\x4f\x2c\xfb\x0c\x07\x17\x77\x56\x69\x71\x81\x0b\x65\x12\x87\xf6\xb8\x7f\x57\x6e\x78\x45\x9b\x22\x1a\x7c\x50\x38\x0a\x94\xb3\xac\xc6\x06\x1d\xc4\xc9\xe5\x39\xf4\xf0\x13\xc6\x40\x1b\x71\x6b\xb5\xbe\x93\xd5\x92\xe7\x10\x62\x87\x1f\x7b\x61\xc5\x6e\x90\xdf\x32\x1e\x7b\x82\xa6\x86\x93\x10\x20\x9e\x92\xfe\x8d\x69\xd0\xf1\xfc\xf9\xe9\xb8\xbe\x74\x49\xee\xf5\xa6\x1c\x74\xa3\xb2\x9d\xa1\x74\xf1\x62\xb2\x1e\xb6\x90\xe7\xe2\x32\x62\x8e\x4c\xff\xc9\xf9\x61\x96\xfc\x41\x36\x42\x92\x70\x04\x7d\x7d\x06\x19\xad\xa5\x21\xb0\x06\xc1\x61\x65\x5d\x5d\xc0\xc2\xd2\xd9\xa8\x18\xf0\xbb\xa4\x5f\xac\xcb\x7c\x7a\x75\x5e\x5e\xbf\xb6\x2e\xff\x62\x21\x1a\xa9\x3d\xbe\x09\x3b\xf8\x70\x08\x21\xfe\xeb\xfa\xbc\xbf\xb9\x7a\x27\x63\x15\xd8\x9f\x00\x00\x00\xff\xff\x36\x8a\x47\x09\xb8\x06\x00\x00")

func templates_testUpsertGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templates_testUpsertGoTpl,
		"templates_test/upsert.go.tpl",
	)
}

func templates_testUpsertGoTpl() (*asset, error) {
	bytes, err := templates_testUpsertGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates_test/upsert.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xff, 0xc5, 0x57, 0x4c, 0xcf, 0x6c, 0xee, 0x54, 0xf7, 0xe5, 0x54, 0x88, 0xf9, 0xf2, 0x14, 0x8f, 0xd5, 0x2e, 0xda, 0x50, 0x1a, 0x8f, 0xc9, 0x6e, 0xe7, 0xa1, 0x38, 0x74, 0x4, 0x4e, 0xde, 0x69}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/17_upsert.go.tpl": templates17_upsertGoTpl,

	"templates/singleton/mssql_upsert.go.tpl": templatesSingletonMssql_upsertGoTpl,

	"templates_test/singleton/mssql_main_test.go.tpl": templates_testSingletonMssql_main_testGoTpl,

	"templates_test/singleton/mssql_suites_test.go.tpl": templates_testSingletonMssql_suites_testGoTpl,

	"templates_test/upsert.go.tpl": templates_testUpsertGoTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"17_upsert.go.tpl": &bintree{templates17_upsertGoTpl, map[string]*bintree{}},
		"singleton": &bintree{nil, map[string]*bintree{
			"mssql_upsert.go.tpl": &bintree{templatesSingletonMssql_upsertGoTpl, map[string]*bintree{}},
		}},
	}},
	"templates_test": &bintree{nil, map[string]*bintree{
		"singleton": &bintree{nil, map[string]*bintree{
			"mssql_main_test.go.tpl":   &bintree{templates_testSingletonMssql_main_testGoTpl, map[string]*bintree{}},
			"mssql_suites_test.go.tpl": &bintree{templates_testSingletonMssql_suites_testGoTpl, map[string]*bintree{}},
		}},
		"upsert.go.tpl": &bintree{templates_testUpsertGoTpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
