// Code generated by go-bindata. DO NOT EDIT.
// sources:
// override/templates/17_upsert.go.tpl
// override/templates/singleton/psql_upsert.go.tpl
// override/templates_test/singleton/psql_main_test.go.tpl
// override/templates_test/singleton/psql_suites_test.go.tpl
// override/templates_test/upsert.go.tpl

package driver

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templates17_upsertGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x58\xdf\x6f\xdb\x36\x10\x7e\x96\xfe\x8a\xab\x31\x20\xd2\xe0\x28\x7b\xce\xe0\x87\x26\x69\xbb\xa2\x6b\xea\x35\xcd\x0a\xac\x28\x02\x5a\x3a\xd9\x44\x68\x52\xa5\xa8\xa4\x9e\xa6\xff\x7d\x38\x92\xb2\x24\xff\x68\xdc\x76\xdd\xba\xa7\x58\xe4\xf1\xee\xe3\x77\x1f\x79\xc7\xd4\xf5\x31\xfc\xc0\x04\x67\x25\x9c\x4e\x20\x79\x4c\xbf\xb0\x4c\xde\xb0\x99\x40\x70\x7f\x92\x4b\xb6\xc4\xa6\x09\xad\x69\x99\x2e\x70\xc9\xdc\x34\x2d\xe8\x2c\xe0\x2f\x48\xae\xba\x59\xbb\x80\xe7\x90\x3c\xce\xb2\x67\x42\xcd\x98\x80\xe3\xa6\x09\x4f\x4e\xe0\xba\x28\x51\x9b\x67\xc0\x8c\xc1\x65\x61\x4a\x60\x12\xb8\xa4\xb1\x31\x30\x99\x41\xa6\xd0\x8e\x55\x45\xc6\x0c\x82\xd2\xc0\xe7\x52\x69\x04\x25\x21\x55\x32\x17\x3c\x35\x49\x98\x57\x32\x85\x48\xc1\x8f\x75\xed\xf0\x27\xd7\xc5\x15\x97\xf3\x4a\x30\xdd\x34\x71\x1b\x25\xb2\x20\xa4\x32\x90\x5c\xaa\x73\x25\x0d\x7e\x34\x4d\x93\x9a\x8f\xe4\x8a\x3e\x12\x3f\x38\x86\xba\x46\x99\x11\x48\x1f\xf9\x95\x3c\xf7\xd1\x60\xa6\x94\x18\xaf\x83\x9f\x2b\x51\x2d\x65\x09\xef\xde\x97\x46\x73\x39\x1f\xfb\x05\x7e\x7c\xec\x77\xd3\x9a\xcd\x14\x17\x89\xff\x88\x01\xb5\x56\x1a\xea\x30\xd0\x68\x2a\x2d\x41\x25\x0e\xa9\x03\xda\x07\x69\xd7\x3d\x43\x73\x71\x16\xc5\x75\x8d\xa2\x44\x0b\x7c\x0c\xed\x84\xb7\xf4\xf3\x32\x6b\x9a\xf1\x16\xf4\x2d\xd4\x9f\x06\x1b\x87\x4d\x18\xae\x89\x08\x5d\x0a\x29\x29\xbd\x34\xd2\xcf\x29\x93\x3c\xdd\x48\xe8\xf4\xeb\x32\x0a\xd6\x67\x49\x63\x96\xa3\x83\x53\x3c\xfd\xee\x72\x5c\x87\x01\xcf\x69\x17\x74\x44\xbe\xb3\x04\xff\x6c\x71\x3d\x9a\x80\xe4\x82\x80\x06\x05\xd1\x1e\xd9\x90\x6f\x35\x2b\x9e\x68\x1d\xa1\xd6\x71\x1c\x06\xcd\x2e\x31\xec\xc9\xfe\xae\xe4\x43\x55\x72\x39\xa7\x6f\xfc\x88\x69\x65\x94\xfe\x9c\x03\xde\x73\x5d\x7c\x99\x32\xa6\xdb\x94\x13\x10\x47\xef\x13\x0f\xa9\x47\xfc\xb6\x5c\x3a\x73\x3f\xd4\x5b\xb5\x3b\x1d\xff\x92\x8c\x76\x88\xbd\x2f\x6e\xc2\xfd\x9f\x4a\x65\x9d\xbc\x6f\x21\x8b\x2b\xc4\x01\x53\x90\xa9\xb4\x5a\xa2\x34\xcc\x70\x25\x21\x57\x1a\x16\xea\x1e\x8c\x82\x42\xab\x02\xb5\x58\x41\x55\xe2\x70\xaf\x36\xe2\x60\xbb\x87\xaa\xea\x7f\x2e\xaa\x75\xfd\xe1\x39\x28\x98\x74\xc9\xf5\xf5\xc8\xce\x97\xc9\x25\xde\x47\xa3\xba\x4e\xa6\xb7\x73\x57\xfe\x4f\x41\x2a\xa8\xeb\x41\x4b\x40\xfc\xde\xf1\x0c\x33\xcb\x79\x65\xe9\x19\x59\x35\x84\x01\x75\x0b\x94\x79\x41\xb9\x1c\x19\xbe\xc4\xd2\xb0\x65\x71\xe3\xac\x6e\x16\x28\x0a\xd4\x23\x48\xa0\x71\xd6\x9d\xa8\x7f\x51\xea\xb6\xb4\x32\x1a\xc8\x3f\x53\x67\x98\x2b\x8d\x2e\x0b\xd6\xe8\xe0\xb3\xb0\x2d\xe5\x6e\xb7\x04\xd7\xa2\xb5\xe4\x87\x61\x20\xff\xbc\xc0\x9c\x55\xc2\xd8\x96\xe8\x43\x85\x9a\x63\x99\x5c\x2a\xf9\x07\x6a\xe5\xa7\xae\x90\x74\xe0\x55\x72\xa1\xee\x65\xa7\x13\xcf\xf4\x5b\x6e\x16\xde\x78\x0c\x2a\x0e\xc3\xe0\xe4\x04\xce\x2a\x2e\x32\x48\x59\xba\x40\xb8\xc5\x15\x70\x79\x2c\xb8\x44\xa8\xe6\x82\x8b\x15\x1c\xc3\x72\x55\x7e\x10\x70\x57\x42\x41\x7f\x0b\xad\x66\x02\x97\x65\x18\xcc\xaa\x9c\xc0\x94\x46\x2f\x99\x9c\x0b\xa4\xea\x70\x56\xe5\x39\xea\x28\xb6\x34\x6d\x49\x86\x36\x39\xab\xf2\xe4\xad\xe6\x06\xcf\x56\x06\xa3\x23\x73\x44\xb9\x01\x92\xe6\xae\xe9\xdc\x4e\x87\x9b\xc3\x09\x0d\x53\x7e\x6f\xc6\x90\x12\x08\xcd\xe4\x1c\xb7\xc4\x38\x70\x78\x65\x75\x19\xa5\xfb\x1d\x6e\x9a\x96\x46\xa7\x4a\xde\x25\xcf\x8d\x62\xd1\x40\xce\xc9\x0b\x2e\xb3\x78\x27\x86\xa1\xdd\xb9\x12\xff\x2c\x8c\xe1\xf5\xb0\x1f\xc6\xd0\xee\x4b\x60\x6c\xfb\xec\x89\xf0\x13\xbe\x48\x43\xa7\x13\xa0\x59\x3f\x11\x87\x41\x27\x92\x69\xd5\x8a\x64\x56\xe5\xb1\x3d\x66\x3b\x25\xeb\x8e\xd4\x39\xc9\xf2\x65\x65\x92\xd7\xbf\xaa\xf4\x96\x3c\x59\xa1\x8e\x9d\x5e\x33\x0a\xf4\xf0\xfa\x77\xb7\xb8\x7a\x7f\x70\xa0\x6b\x29\x5c\xa8\x30\xb8\x63\xda\x9e\x51\x7b\xff\x84\x56\xd3\x8f\x7c\x60\x22\xa0\x6d\x27\x35\x1a\x02\x32\xa4\xfc\x79\xef\x8b\x4e\x66\x18\x04\xfb\x10\xb4\x77\xe4\xc3\x26\xfd\x03\x7c\x98\xb5\xaa\x4c\x7f\x41\x97\x42\xfa\x8c\xc3\x20\xf0\x95\xed\x74\xb2\xa1\xdc\xeb\xde\xd7\xd7\xe3\x9f\x6a\xbe\x64\x7a\xf5\x02\x57\x3d\x63\xa2\x98\x38\x15\x28\xfd\xf1\x8a\xe9\xf2\xff\xc9\x92\xfb\xf0\xdd\x5f\x49\xfb\xe2\x33\xca\xdf\xf2\x9b\x95\x80\x8a\x53\x25\x32\x7b\x17\xcf\xec\x25\xe7\xf7\x9a\x5a\x08\x20\x78\x69\x2b\x83\x2d\x0d\x41\x7b\x77\x10\x13\x1b\xf7\x48\x87\xb2\x9d\xe8\xe3\x5c\x2f\x9c\xc0\x92\xdd\x62\xd4\x55\x40\x5a\x71\x28\x1f\x74\x8a\xc9\x57\xb1\x5a\x07\x19\xef\x93\xf6\xf6\x62\xbb\x89\xc0\x9d\x8d\x84\xaa\xc3\x0a\x26\x6e\xcf\x4e\xdd\xbf\xd1\xd0\x54\x95\x66\xae\xb1\x8c\x32\xce\x04\x92\xff\x51\x5d\xf7\x1f\xcf\x4d\x33\xda\xd5\xa0\x69\x34\xed\x70\x57\xef\xdb\x82\x6e\x73\xe8\xe2\xde\x31\x51\xe1\x4b\x56\x14\x76\xf3\x74\x6e\xba\x4a\x75\xc6\x65\xe6\xa7\xf6\x51\xf2\x66\x55\xe0\xde\x2d\xaf\xdd\xb6\x51\x83\xb6\x0e\xf7\xea\xe7\xa0\x80\x5a\x42\x7c\xda\x34\x9a\x98\x0c\xdb\x8c\x59\xb8\x1a\xcd\xb7\x06\x4b\x71\x29\xe0\x0e\xa8\x43\xac\x16\x6c\xe3\x9a\x14\x4b\xa3\xbd\x74\x31\xa7\x34\x25\xcf\x65\xc6\x35\xa6\x26\x6a\x07\x7e\x27\x8b\x57\x79\xa4\x48\x34\x77\x4c\x0c\x7a\x02\x3b\x59\x3e\xd5\x6a\xd9\x6e\xc1\x3a\xf4\x37\xe6\x20\x49\xb1\xbb\xe1\x1c\x12\x6a\xdd\xb8\x34\xa8\x73\x96\x62\xed\xfa\x1c\x2b\xf9\x0d\xb2\x7a\x44\xb6\x0b\xbb\xe0\x53\xa3\xf7\x87\xee\xf9\x70\x3b\xe5\xb9\xeb\x03\x2f\x70\x56\xcd\x5f\xaa\xcc\x75\x00\x37\x63\xb8\x81\x09\xe4\x4b\x93\x3c\x2d\x34\x97\x46\xc8\xa8\x33\xb3\x05\x47\xb7\x2e\xad\xd4\xe3\x83\x17\x11\x57\x5d\xec\x07\x76\xb7\xd1\x52\xbb\xe6\x2f\x70\x4a\xa1\xfe\x2d\xb1\x87\xea\xb5\xba\x8f\x7a\x58\x5c\x8c\x24\x49\xe2\xe4\x2a\x65\x56\x79\x44\x11\x0d\x58\x97\xb6\xcf\xd9\xeb\xc9\x87\x8a\x6c\xb7\xf8\x39\x5e\xfd\x13\x67\xad\xb4\xc9\x04\xca\x0f\x22\x79\xa2\xf5\xa5\x7a\xad\xee\x5d\xbd\xf6\x11\x49\x82\x27\x27\xd0\xde\x06\xf6\x89\x23\x8f\x8c\x97\x01\x30\xb9\x32\x0b\x7a\x0b\xdd\x2f\x50\x82\x59\xa0\xc6\xa3\x92\xfa\x6c\x77\x03\x78\x9d\x76\x0d\xdb\x6e\x9a\x6e\xda\x33\x65\xf7\x47\x8f\x89\xdd\x2c\x6d\x92\xb2\xbd\xee\x61\x4e\x86\x14\x74\x1d\xfa\xce\xce\x9a\x6a\x09\xbd\x13\xe9\x91\x68\x2f\xc0\xcf\xa9\x28\xa3\x4e\x3c\xfd\x3e\xe0\xb0\xc6\xa2\x6d\x60\x0e\x30\xb7\x0d\x0b\x4c\xdc\x76\x0f\x0e\xb0\x6e\x5c\x82\x4f\xbc\x5e\xd6\xff\xe1\xcb\xd4\xe3\xdc\xa0\xfe\xa2\x97\x8b\x7f\x9b\xac\xd3\xe6\x9d\x4a\x2e\xfa\xaf\x96\x26\xfc\x3b\x00\x00\xff\xff\xce\x80\x9d\x1d\xc9\x15\x00\x00")

func templates17_upsertGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templates17_upsertGoTpl,
		"templates/17_upsert.go.tpl",
	)
}

func templates17_upsertGoTpl() (*asset, error) {
	bytes, err := templates17_upsertGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/17_upsert.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf3, 0x65, 0x34, 0x46, 0x25, 0x1a, 0x39, 0xea, 0x44, 0x1b, 0x63, 0xb6, 0xe5, 0x68, 0x39, 0x32, 0xb8, 0x7, 0x74, 0x13, 0x3e, 0x3c, 0x58, 0x82, 0x5c, 0x33, 0xb0, 0xdf, 0xc6, 0xdb, 0x91, 0xb}}
	return a, nil
}

var _templatesSingletonPsql_upsertGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\x5f\x6b\xdb\x3e\x14\x7d\x96\x3e\xc5\xad\xa0\xd4\x06\xe1\xfe\xfa\xfa\x83\x3c\xb4\xb1\xdb\x79\x04\xbb\x89\xed\x6d\x30\x46\x71\xec\xeb\x54\xe0\xd8\x99\xfe\x64\x2b\x6b\xbe\xfb\x90\x63\xd7\x69\x93\x51\x0a\x41\x09\xba\xf7\x1c\x9d\x7b\x74\x94\xcb\x4b\x58\x1a\x51\x97\xd9\x46\xa1\xd4\x73\x83\xf2\xe9\xbe\x55\x7a\x25\x51\xed\x0b\x0a\x72\x48\xe6\x33\x50\x3a\xd7\xb8\xc6\x46\x83\xd2\x52\x34\x2b\x30\xca\xae\xfa\x11\xc1\x74\x58\x3f\xd7\x39\x6c\x64\xbb\x15\x25\x96\x1e\xad\x4c\x53\xfc\x93\xda\x29\x45\x0e\xa5\x14\x5b\x94\xca\xf3\x45\x5e\x63\xa1\x39\xe8\x7c\x59\x63\x94\xaf\xb1\x3f\x82\x83\xd9\x94\xb9\xc6\xb8\x99\xb6\x4d\x55\x8b\x42\xc3\xb2\x6d\x6b\x0e\x12\xf5\x50\xe3\x50\xf4\x35\x0e\xbf\x1e\x85\xc6\x5a\x28\x0d\xdf\x7f\xec\x19\xdc\x41\xec\x1f\x4a\x86\x3e\x98\xd8\xcd\x75\xde\xac\x6a\xf4\xc2\x12\x1b\x3d\x37\xad\xc6\xa4\x16\x05\x5a\x5d\xde\x6c\xce\xc1\x7e\x2f\xe6\x23\xb9\x4b\xc9\xc8\xfe\x11\x82\x17\x94\x4b\x89\xc4\x8f\x61\x25\x6a\x97\x52\xb2\x34\x15\xfc\x7f\x88\xbb\x43\x7d\x63\xaa\x0a\xa5\xe3\x52\x52\x62\x85\xf2\xa0\x78\x6f\x86\xe2\xd2\x54\x16\x5e\xb4\xb5\x59\x37\xca\x52\x30\x3f\xb8\xbd\xce\x66\x29\x7c\xb9\x9e\x65\x41\xc2\x28\x11\x15\xd4\xd8\x38\xa3\x4a\x38\x9b\xc0\x7f\xd6\xae\x17\xdc\x04\xaa\xb5\xf6\x92\x8d\x14\x8d\xae\x1c\xe6\x9c\x2b\xb7\xc7\x83\xfd\xcd\x38\x25\x84\xec\x6d\x56\xde\xe7\x56\x1c\xb0\x71\x60\x1c\x98\x3b\x74\x0c\x0a\xeb\xbc\xc0\xc7\xb6\x2e\x51\x76\x41\xf0\x32\x85\x61\x53\xe2\xef\xc3\x02\x7f\xa3\x8b\xc3\x15\x87\x2b\xd7\xa5\x64\x47\x29\x79\xe0\xf0\xd0\x0b\xbb\xed\x85\x51\x62\x8d\xb2\x47\xb1\x30\x4a\x82\x45\x0a\x61\x94\xc6\x70\xae\xec\x27\x8e\x60\x1a\x47\xb7\xb3\x70\x9a\x42\x27\xf8\x25\x6a\x7c\x9c\x94\x53\x62\xfd\x12\x15\x9c\x1d\xe5\xee\xf9\xb9\xd3\xb3\xdf\x77\x61\x32\x98\xb4\x34\x95\xf7\x55\x0a\x8d\x49\x67\x80\xc3\xfc\x18\xa2\x38\xfd\x14\x46\x77\xcc\x6a\x05\xac\x15\xbe\xee\xbc\x79\xd2\xe8\x5c\x38\x17\xee\x09\xf8\x2b\x1b\xc7\x60\x77\x2e\x9e\xea\x67\x2e\xf8\x31\x64\xf7\xfe\x75\x1a\x40\x12\xa4\xc0\xec\x04\xa4\x6a\x25\x08\x0e\x5b\x7b\xe7\x32\x6f\x56\xd8\x3f\x96\x4e\x88\x1d\x50\x8c\xd7\x7c\xa4\x8c\x77\xca\xc8\xce\x2e\x3f\x6d\x38\xcb\xd7\xe9\x1b\x53\x7b\x14\xd8\x6d\x87\x7c\x2b\x72\x4f\x72\xb2\xc4\x60\x02\xc1\xb7\xe9\x2c\xf3\x03\xdf\x63\xef\xa0\x77\xfb\xbb\xef\x23\x6b\x1f\xc7\x38\xc5\x31\xf1\x22\x48\xb3\x45\x14\x46\x77\xc0\xde\x75\xba\xfb\x3f\x19\x4c\xb6\x67\x48\xd4\x46\x36\x60\x41\x7d\xbf\x4b\x77\xf4\x6f\x00\x00\x00\xff\xff\xf0\x32\xa5\xf3\x2c\x05\x00\x00")

func templatesSingletonPsql_upsertGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesSingletonPsql_upsertGoTpl,
		"templates/singleton/psql_upsert.go.tpl",
	)
}

func templatesSingletonPsql_upsertGoTpl() (*asset, error) {
	bytes, err := templatesSingletonPsql_upsertGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/singleton/psql_upsert.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf1, 0x6a, 0x9f, 0x70, 0x94, 0xf5, 0xd6, 0xf7, 0x93, 0x84, 0x21, 0xdc, 0x61, 0xe4, 0x85, 0xf, 0x26, 0x85, 0x35, 0xcf, 0xc4, 0x9, 0xaf, 0x33, 0x73, 0xfd, 0xc, 0x53, 0xe9, 0x36, 0x31, 0x2e}}
	return a, nil
}

var _templates_testSingletonPsql_main_testGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\x6d\x6f\xe3\xb8\x11\xfe\x2c\xfd\x8a\xa9\x81\x1c\xa4\xad\xc2\x1c\xfa\xf2\x25\x07\x63\x91\x38\x4e\xba\xb8\xac\xe3\xb3\xdd\x1e\x8a\x6e\xbb\x47\x5b\x23\x85\x88\x44\x32\x24\x15\xaf\xbb\xc8\x7f\x2f\x86\x94\x6c\x39\x6b\x6f\xb6\x2d\x5a\xdc\xb7\x98\x7c\xe6\xe5\x99\x17\xce\x28\x4f\xdc\x80\x29\x3f\x4d\x6f\xae\x1f\x70\x03\x43\x30\x58\xe2\x27\xcd\xde\x37\xd6\x8d\x54\xad\x45\x85\xc9\x2f\xc9\xdb\x3a\xfd\xc7\xc5\xed\x62\x3c\x83\xc5\xc5\xe5\xed\x18\xee\x26\xb7\x7f\x05\xf6\xe6\x83\xfc\x60\x7f\x7b\x71\x75\x05\xa3\xbb\xc9\x7c\x31\xbb\x78\x37\x59\x00\x7b\xf3\x16\xae\xef\x66\xe3\x77\x37\x13\xf8\x71\x4c\xa8\xb7\x3f\x7c\x90\xbf\xa4\x71\xec\x36\x1a\x41\x97\x0b\xb4\x0e\x0d\x58\x67\x9a\x95\x83\xcf\x71\x94\x2f\x47\x4a\x4a\x78\x63\x1f\x2b\x76\x75\x19\xd3\xc1\x84\xd7\x08\x04\x11\xb2\x8c\xa3\x7b\x65\x1d\xc0\xee\x77\x63\xd1\xf4\x7f\x6b\x6e\x6d\xff\xb7\xb5\x55\xad\x72\xdc\xdd\x2b\xe3\xe5\x85\x74\x71\x1c\xe9\x72\xca\xad\xbd\x16\xd5\x16\x10\x47\x0e\xad\xbb\xba\xf4\x56\xdb\xb3\xe7\x38\x2e\x1a\xb9\x02\x21\x85\x4b\xd2\xe0\xe6\x7b\x2e\x24\x0c\xe1\xbb\x8e\xc3\xe7\x67\x82\x9d\x9d\x81\x45\xd7\x68\xc8\x9b\x5a\x5b\x70\xf7\x08\x39\x77\x7c\xc9\x2d\x82\x5d\xdd\x63\xcd\x81\xcb\x1c\x44\x4d\x6e\x58\x10\x8e\xfc\x50\xc0\xc1\x21\x1d\x71\xb3\x01\xc3\x65\xae\xea\x6a\x43\xba\x4a\x94\x68\xb8\xc3\x1c\xc8\xa9\x9e\x2a\x05\xee\x9e\x3b\x7f\x6a\x61\xc5\x25\x2c\x11\x4c\x23\x81\x97\x5c\x48\xeb\x48\x71\x63\x85\x2c\xc9\x83\x7d\x45\xf6\xb1\x5a\x2a\x51\xa1\x81\xbb\xd9\x7b\xd0\x7c\xf5\xc0\x4b\x64\x81\x5f\xa2\xe1\x4d\xc7\x27\x0d\x44\x92\x14\xd0\x18\x65\x88\x34\x55\x07\x1a\x13\x0e\xe2\x38\x7a\x12\x1a\x0d\x9b\xa3\xbb\xc2\x82\x37\x95\x4b\x06\x9a\xd2\x16\x78\x0e\x32\x18\xe8\x66\x59\x89\xd5\x20\x3d\x0a\xa5\x28\x0c\x32\xf8\xe3\x1f\x7e\xff\xbb\xe3\xa0\x36\x83\xa4\xd0\xe0\x63\x23\x0c\x0e\x52\x4a\x1d\x6b\x4b\x63\x08\x41\xf0\x06\xdd\xdc\xe7\xab\x95\xcb\x97\x92\xd7\x84\x8d\x34\xf3\x55\x73\x0c\x48\x97\x01\xe6\x8b\xe9\x18\x8c\x2e\x03\xcc\xd7\xd8\x31\x18\x5d\xb6\x30\x2a\xb5\x1e\xec\x9d\xdc\xe3\xed\x31\x5d\x79\x1e\xd3\xd6\x91\x27\xc6\x14\xfb\x21\x3c\xf1\x8a\xb3\x4b\x2c\x85\xfc\x0b\xaf\x44\xce\x9d\x50\x32\x49\x59\xfb\x03\x93\x38\x8a\x3c\x24\xa8\x99\x28\x37\xae\xb5\xdb\x24\x81\x1c\x25\x65\xc7\x25\x3b\x8a\xa5\x90\x74\xd8\x10\x9e\x2d\x76\xa2\x5c\xe2\xff\x18\x3f\x36\xbc\xb2\x49\xe0\x99\xc1\xf7\x1d\x3e\x90\xfb\x8a\xf2\x90\xb7\x0e\xde\xa5\xe9\x38\xbe\x8d\x41\x27\xb0\x0d\x49\x16\x47\x29\x1b\xdd\xe3\xea\x21\xa1\xf0\x88\xc2\x57\xe7\x6f\x86\x20\x45\x45\xf5\x1a\x19\x74\x8d\x91\x74\x1a\x47\xcf\x71\x1c\x9d\x9d\xc1\xc8\x20\x77\x08\xbc\x6d\x33\xf1\x4f\xcc\x21\x5f\x02\xb9\xc0\x28\x1f\xbd\xe6\x1f\xee\x30\x6c\xee\xf8\xb2\xc2\x70\xb1\x65\xd0\x33\x3a\x04\xcd\x6a\xfe\x80\xd3\x9b\xee\x3d\x49\xd2\x1f\x5e\x73\xa7\x27\x9b\x1b\xa5\x17\xde\xf4\xab\x72\x7d\xb1\x95\x67\xf3\x8d\x82\x71\x44\x8f\xd2\xa8\xce\xe1\x7c\x08\xf8\x09\x57\x6c\xa4\xea\x9a\xcb\x3c\x19\xe8\xf2\x23\xdd\x51\x8b\x9d\x9e\x86\xfe\x3d\x55\xb2\xda\x0c\x32\xd8\x91\xed\xc4\xd9\x58\x3e\xc1\x10\xb8\xd6\x28\xf3\x44\x59\xfa\x2d\x0c\x15\x21\xa1\x75\x39\x96\x4f\x49\xca\x18\x4b\xe3\x28\xf8\x77\xd8\xa4\x7d\xac\xbc\xfa\x5d\xc4\xfb\x02\xdf\x6e\x24\x8e\x4c\x06\x6b\x32\x20\x14\x9b\x0a\x8d\x49\xcf\xd5\xb9\xcb\x55\x43\x4d\xb8\xee\xeb\x9e\xbb\xdc\x3f\xde\x12\xd7\xd7\x3f\xe2\xe6\x0a\xad\x33\x6a\x83\x26\xd9\xce\xbe\x0c\xcc\x5e\x76\x77\xfa\xb8\x71\x5f\x8d\xb4\x32\x96\xfd\x6c\xb8\x4e\xd0\x50\xb7\x15\x5c\x54\xf4\x7c\x2b\xb0\x24\x0a\x6d\xa4\x61\x15\xe2\x40\x8f\x40\x3f\xa5\x7d\x1f\xff\x5b\x4b\xf6\xb1\xda\x37\x73\x80\xcf\xcf\x5c\x1c\x32\x52\xd4\x8e\x4d\x8d\x90\xae\x92\xa4\x3d\xfd\x36\xbb\x6b\x2e\x1c\x14\xca\x1c\x26\x19\x47\x6b\x36\xaa\x94\xc5\x24\x85\xb3\x33\xb8\x28\x68\xf0\x77\x15\x29\x2c\xe4\x4a\x62\x06\x2b\x42\xf8\xb9\xb9\x36\xc2\x21\xa0\xcc\x41\x15\xfe\x40\x0b\x8d\xf1\xc1\x58\xfd\x8f\x58\x1c\x08\x60\x2b\x2f\x45\xb5\x5d\x0a\xf6\x87\xa6\x69\xe4\xa8\xce\x13\x4b\x15\x96\x75\xd2\xed\x1e\x91\x01\x37\xa5\x05\xc6\x58\xf8\xdd\x1b\xad\xab\x03\x2d\xd2\x0a\x07\xa9\xb6\x9f\xfe\xbd\xc6\x10\x05\x54\x28\x83\x33\x29\x45\xe6\x7b\x1f\x97\x55\xaf\x05\x82\x27\x96\x4d\x70\x3d\x43\x9e\xa3\x69\xd1\x81\xae\x0d\xed\x73\x3e\x84\xef\x96\x1b\x87\x96\x5d\x36\x45\xe1\x77\x1d\xba\xa2\x70\x1f\xba\x5a\xf5\x1b\x2f\xa8\xd8\x1e\x86\xd4\x05\xe1\x6d\x2e\xcf\x87\x40\xd7\xb3\x46\xbe\x92\xc5\x2e\x4d\xa6\x91\x52\xc8\xf2\x7c\xb0\x0d\x71\x88\x52\xfa\x02\x1f\x8c\xb7\x13\x25\x49\x0f\x5c\xa3\x31\x7b\xd7\x2f\x9f\xcc\x57\x13\xde\x46\x1c\xfe\xf6\xf7\x10\x4a\xf2\xb9\x15\xea\x8e\x3a\x16\x73\x4d\x76\x8b\x64\x30\xbd\xf9\xd3\xdd\x7c\x31\x3c\xb1\xfe\x01\xa4\xf9\xea\xa7\xdf\x0b\xcc\xf4\x6e\xb6\x18\x9e\xe4\x1e\x43\x33\xf5\x10\xe6\xcf\xf3\xf1\xac\xd3\x43\x33\xfd\xa0\x9e\x8b\xf9\xfc\xfa\xdd\xed\xb8\xc3\xed\x76\x5e\x42\x3f\x1f\xe1\xf5\x72\x9a\xed\x6a\xd5\xd5\x3a\xeb\xd2\x26\x54\xe3\x44\xc5\x16\x58\x6b\x0f\x1b\xf8\xb5\xaf\xec\x76\xa0\xaf\x8d\xe4\xa3\x0d\x18\xfa\x1a\x94\xa6\xcd\x06\x0a\x51\x61\xd7\x7d\x1f\x33\xf8\x08\x43\x20\x7e\xd7\x2d\x3f\xef\xcc\xe0\xc4\x9e\x9f\xe4\xe7\x5a\x59\x57\x1a\xb4\xe7\xbd\xc0\x76\xc1\xdb\x06\x68\xdb\x15\x61\x8d\xeb\xb5\xc5\x51\xed\x9d\x3e\x8f\xf7\xef\xf5\x17\xd0\x4a\x12\x36\x7d\xdd\xc7\x93\xa3\xde\x75\x5b\xd1\xaf\xdd\xcf\xdd\xbc\xfe\xbf\xf9\xda\xaf\x59\x18\x82\xab\x35\xf3\x8b\x58\xba\x6d\x35\x3a\x6a\x87\xcb\x91\x7a\xde\x5f\x95\x76\xd5\xdc\x2a\xd0\xac\x7d\xb9\x7d\x05\x07\x70\xbe\xfc\x62\x41\x39\xac\xbb\xbf\xbd\xbd\xa2\x99\xa0\x5e\xef\xe0\xf4\x54\x14\xa7\xf8\x49\x58\x67\x0f\x99\x39\x3b\x03\x87\xdc\xe4\x6a\x2d\xfd\x58\x68\x1c\x5a\x58\x55\xc8\x65\xa3\xc1\x71\xfb\x60\x61\x7d\x8f\xd2\x4f\xc6\xf0\x19\x58\x08\x29\xec\x7d\xf7\x36\x1e\xf2\xb3\x53\x78\xfc\xa3\x6e\x6f\x27\xf5\x9f\xe2\x5d\x58\x5f\xdb\x4a\x3b\x3c\x78\xc4\x7f\xbc\xdd\x6e\xc3\xa6\x2c\x9b\x61\xad\x9e\x68\xdd\xee\xbd\x58\xc7\xb2\xab\x24\xb1\x4a\xda\xff\x1b\x64\x81\x8e\xff\x54\x17\xc5\x96\xcb\x01\xb3\xdd\x55\xe6\xbd\xf6\x0e\xbc\x88\xc8\x0e\xd1\xce\xae\xc7\x8a\xdd\x69\x94\xc9\xa0\x7b\x6f\x06\x19\xe4\x46\x3c\xa1\x61\xd3\xf9\x4f\xb7\x97\x8d\xa8\xf2\x9f\x1a\x34\x9b\x76\xae\x74\x5f\x5e\xa1\xd8\xbf\x6c\xa1\x97\x0d\xd6\x7e\xdf\xa4\x5f\x7b\x3f\xa5\xa8\xb2\x2f\x42\xb6\xcf\xe5\x39\xfe\x57\x00\x00\x00\xff\xff\xba\x3a\xa3\x82\xce\x11\x00\x00")

func templates_testSingletonPsql_main_testGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templates_testSingletonPsql_main_testGoTpl,
		"templates_test/singleton/psql_main_test.go.tpl",
	)
}

func templates_testSingletonPsql_main_testGoTpl() (*asset, error) {
	bytes, err := templates_testSingletonPsql_main_testGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates_test/singleton/psql_main_test.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x2d, 0x93, 0xcc, 0xa0, 0x8c, 0x12, 0x38, 0x33, 0xdb, 0xf, 0x4b, 0x8c, 0xa7, 0x94, 0x51, 0xe9, 0xcb, 0xea, 0xfb, 0xb8, 0xe4, 0x5d, 0xab, 0xc6, 0xb8, 0xea, 0x83, 0x46, 0x34, 0x38, 0xbb, 0x68}}
	return a, nil
}

var _templates_testSingletonPsql_suites_testGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\xc1\x0a\xc2\x30\x10\x44\xef\xfd\x8a\xa5\xe4\xd0\x4a\x9b\x0f\x10\x3c\x78\xd4\x83\x88\xb4\x1f\x10\xed\xb6\x04\xe2\x5a\xba\x5b\x10\x42\xfe\x5d\xd2\x46\xe9\xc1\xdb\x0c\x6f\x32\x99\xed\x67\x7a\x40\x83\x2c\xed\xc8\x38\x49\x21\xb0\x13\x64\xb1\x34\xe8\xa6\x04\x9f\x01\x78\x5f\xc3\x64\x68\x40\x50\x96\x3a\x7c\x57\xa0\xc4\xdc\x1d\xc2\xfe\x00\xba\x89\x8a\x43\x48\x39\xdb\x27\xa8\x4f\x7c\x7e\x59\x5a\x30\xd4\x3f\x8e\x8e\xb7\x56\x19\x67\x0d\xc7\x22\xa5\x8f\x51\x22\xaf\x8d\xdf\x96\x8b\x79\xe2\x92\x16\x7d\x9b\xa9\xc8\xbd\x5f\x9f\xe8\x76\xbc\xba\x79\x32\x2e\x84\xbc\x82\x38\xf8\x0f\x59\x2f\x2a\x97\xbf\x90\xba\xed\x8c\xe4\x42\xf6\x09\x00\x00\xff\xff\x11\x5d\x4c\xce\xff\x00\x00\x00")

func templates_testSingletonPsql_suites_testGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templates_testSingletonPsql_suites_testGoTpl,
		"templates_test/singleton/psql_suites_test.go.tpl",
	)
}

func templates_testSingletonPsql_suites_testGoTpl() (*asset, error) {
	bytes, err := templates_testSingletonPsql_suites_testGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates_test/singleton/psql_suites_test.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x10, 0xc4, 0x71, 0xaf, 0xd9, 0x16, 0x41, 0x8b, 0x4b, 0xfc, 0xe8, 0xba, 0xfd, 0xfa, 0x4d, 0x2c, 0x1, 0xd1, 0x0, 0xe1, 0xb0, 0x78, 0xee, 0x7f, 0xd0, 0x65, 0xf3, 0xa1, 0x43, 0xba, 0x3c, 0xe7}}
	return a, nil
}

var _templates_testUpsertGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x54\x4f\x6f\xdb\x3e\x0c\x3d\x5b\x9f\x82\xbf\xe0\xb7\x41\x1e\x5c\x15\xbb\x76\xc8\xa1\xff\x0e\xc5\xb0\x20\x68\x9c\xf3\xa0\xda\x74\x2a\x44\x91\x0c\x89\x5e\x92\x19\xfa\xee\x83\xe4\xb4\x4d\xdb\x74\x08\x86\x0d\xc3\x0e\x89\x2d\xe1\xf1\x3d\x92\x8f\x74\xdf\x9f\xc0\xff\x52\x2b\xe9\xe1\x6c\x0c\xe2\x3c\xbe\xa1\x17\xa5\xbc\xd3\x08\xc3\x43\x4c\xe4\x0a\x43\x60\x4d\x67\x2a\x20\xf4\xd4\xf7\x43\x84\x98\xb7\x53\xdd\x39\xa9\x43\x98\xb7\x1e\x1d\x71\x82\x0f\x11\xa0\xcc\x42\x94\x39\xf4\x2c\x23\x31\x95\x4e\x6a\x8d\x9a\xe7\x8c\x65\xaa\x01\x8d\x86\x3f\x12\x5c\xd9\xb5\x99\x29\xb3\xe8\xb4\x74\x21\x5c\x5a\xdd\xad\x8c\xcf\x61\x3c\xfe\x19\x6c\xea\xd4\x4a\xba\xed\x67\xdc\x3e\x06\xf4\x2c\xcb\x48\xcc\x96\xaa\xe5\xa3\xf8\xdf\x2a\xb3\x00\x4a\x35\xac\x15\xdd\x83\x35\x7a\x0b\xed\x10\x07\x4b\xdc\x42\x35\x44\x8e\x72\x96\x05\xc6\x32\x8f\x58\xc7\xfa\x9d\x34\xb5\x5d\xa9\xef\x28\x26\xb8\x9e\x21\xd6\x3c\x67\xd9\x37\xe9\x00\x5d\xfa\x59\xc7\xb2\xd3\x53\x38\x27\xc2\x55\x4b\x40\xf7\x08\x37\x93\xd9\xf5\x6d\x09\x5e\xd5\x08\xb6\x01\x69\x60\x3e\x8d\x37\x2c\xb3\x91\x71\xaf\x57\x4f\x15\xf4\x21\xb5\x22\x92\xee\x6b\xce\xc8\x75\x15\xf1\x98\x4c\x01\xef\x6d\x01\x6f\x34\xe0\xea\xa2\xdc\xb6\xe8\x0b\x20\xd7\x61\xfe\x29\xf1\xfc\x37\x06\xa3\xf4\xae\x11\xd7\x31\xd3\x86\x8f\xe6\x26\xb5\x80\xec\x93\xc8\xe1\x84\xc0\x27\xe9\x33\x78\xe7\x47\x45\xe4\xdb\xf5\xa5\xef\x55\x03\xc6\x12\x88\x89\xbd\xb4\x86\x70\x43\x21\x54\xb4\x89\x95\x55\xc3\x59\x5c\xc8\x6a\xb9\x70\xb6\x33\x35\xcf\xfb\x1e\x4d\x1d\x02\xcb\x06\xc8\x97\xce\x53\xb9\xe1\x89\x65\x9f\xe1\xd5\xc5\x9d\x55\x5a\x5c\xe0\x42\x99\xc4\xa1\x3d\xee\xdf\x95\x1b\x5e\xd1\xa6\x88\x05\x3e\x28\x1c\x05\xca\x59\x56\x63\x83\x0e\xe2\xe4\xf2\x1c\x7a\xf8\x0a\x63\xa0\x8d\xb8\xb5\x5a\xdf\xc9\x6a\xc9\x73\x08\xd1\xe1\x47\x2f\xac\xd8\x0d\xf2\x5b\x85\x47\x4f\xd0\xd4\x70\x12\x02\xc4\x53\x23\xb5\xc7\x24\x5a\x40\xca\xe5\xc6\x34\xe8\x78\xfe\xfc\x74\x9c\x47\x5d\x92\x3e\x6c\xd0\x2b\x67\x2a\xdb\x19\x4a\x17\x2f\xa6\xec\x61\x23\x79\x2e\x2e\x23\xe6\xc8\x52\x9e\xba\xf0\x3a\x4b\xfe\x20\x1b\x21\x49\x38\x82\x3e\x3e\x83\x8c\xd6\xd2\x10\x58\x83\xe0\xb0\xb2\xae\x2e\x60\x61\xe9\x6c\x54\x0c\xf8\x5d\xd2\x2f\x56\x67\x3e\xbd\x3a\x2f\xaf\x0f\xad\xce\xef\x58\x8e\x9d\x35\xc7\x7e\x44\x84\x10\x7f\x74\x95\x7e\x7d\xc6\xe2\x96\xff\xe5\x11\xfb\x47\x26\x2c\xb0\x1f\x01\x00\x00\xff\xff\xcc\x1c\xe7\xf3\xcf\x06\x00\x00")

func templates_testUpsertGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templates_testUpsertGoTpl,
		"templates_test/upsert.go.tpl",
	)
}

func templates_testUpsertGoTpl() (*asset, error) {
	bytes, err := templates_testUpsertGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates_test/upsert.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x51, 0x9b, 0x35, 0xb1, 0xd2, 0xc5, 0xc, 0x1b, 0xe, 0x34, 0x1f, 0xf9, 0x0, 0xb9, 0xad, 0x23, 0xa8, 0xb4, 0x8c, 0x49, 0x7b, 0x29, 0x5f, 0xf1, 0x89, 0x83, 0x8c, 0xd4, 0x90, 0xbd, 0x17, 0x1}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/17_upsert.go.tpl": templates17_upsertGoTpl,

	"templates/singleton/psql_upsert.go.tpl": templatesSingletonPsql_upsertGoTpl,

	"templates_test/singleton/psql_main_test.go.tpl": templates_testSingletonPsql_main_testGoTpl,

	"templates_test/singleton/psql_suites_test.go.tpl": templates_testSingletonPsql_suites_testGoTpl,

	"templates_test/upsert.go.tpl": templates_testUpsertGoTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"17_upsert.go.tpl": &bintree{templates17_upsertGoTpl, map[string]*bintree{}},
		"singleton": &bintree{nil, map[string]*bintree{
			"psql_upsert.go.tpl": &bintree{templatesSingletonPsql_upsertGoTpl, map[string]*bintree{}},
		}},
	}},
	"templates_test": &bintree{nil, map[string]*bintree{
		"singleton": &bintree{nil, map[string]*bintree{
			"psql_main_test.go.tpl":   &bintree{templates_testSingletonPsql_main_testGoTpl, map[string]*bintree{}},
			"psql_suites_test.go.tpl": &bintree{templates_testSingletonPsql_suites_testGoTpl, map[string]*bintree{}},
		}},
		"upsert.go.tpl": &bintree{templates_testUpsertGoTpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
