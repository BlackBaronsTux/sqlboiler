// Code generated by go-bindata. DO NOT EDIT.
// sources:
// override/templates/17_upsert.go.tpl
// override/templates/singleton/mysql_upsert.go.tpl
// override/templates_test/singleton/mysql_main_test.go.tpl
// override/templates_test/singleton/mysql_suites_test.go.tpl
// override/templates_test/upsert.go.tpl

package driver

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templates17_upsertGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\x5f\x6f\xdb\x48\x0e\x7f\xb6\x3f\x05\xd7\xe8\xee\xca\x07\x55\xed\x01\x87\x7b\xc8\x21\x0f\xcd\x9f\x76\x73\x4d\xba\x49\xdc\x5c\x80\x0b\x82\x60\x22\x51\xce\x20\xe3\x19\x75\x34\x4a\xea\xd3\xe9\xbb\x1f\xc8\x91\x2c\xc9\xb1\x1d\xb7\xdb\x1c\xf6\x29\xd6\x0c\x45\x72\xf8\x23\x7f\xe4\x28\x65\xf9\x1a\x5e\x09\x25\x45\x0e\x3b\xbb\x10\xbd\xa3\x5f\x98\x47\x9f\xc5\xad\x42\xf0\x7f\xa2\x4f\x62\x86\x55\x35\x64\xd1\x3c\xbe\xc3\x99\xf0\xdb\xf4\x42\x2b\x01\xff\x85\x68\xd2\xee\xf2\x0b\x32\x85\xe8\x5d\x92\x7c\x50\xe6\x56\x28\x78\x5d\x55\xc3\x37\x6f\xe0\x22\xcb\xd1\xba\x0f\x20\x9c\xc3\x59\xe6\x72\x10\x1a\xa4\xa6\xb5\x10\x84\x4e\x20\x31\xc8\x6b\x45\x96\x08\x87\x60\x2c\xc8\xa9\x36\x16\xc1\x68\x88\x8d\x4e\x95\x8c\x5d\x34\x4c\x0b\x1d\x43\x60\xe0\x2f\x65\xe9\xfd\x8f\x2e\xb2\x89\xd4\xd3\x42\x09\x5b\x55\xe3\xc6\x4a\xc0\x4e\x68\xe3\x20\xfa\x64\xf6\x8d\x76\xf8\xd5\x55\x55\xec\xbe\x92\x2a\x7a\x88\xea\xc5\x10\xca\x12\x75\x42\x4e\xd6\x96\xf7\x8d\x2a\x66\x3a\x0f\x6b\xe7\xea\x47\xb8\x35\x52\x45\xf5\xc3\x18\xd0\x5a\x63\xa1\x1c\x0e\x2c\xba\xc2\x6a\x30\x91\x37\xec\xed\x76\x6d\xf2\x7b\x1f\xd0\x1d\xec\x05\xe3\xb2\x44\x95\x23\xfb\x11\x42\xb3\x51\x4b\xd6\xfb\x3a\xa9\xaa\x70\xa3\x27\xe3\x61\x35\x1c\x2e\x9c\x1e\xfa\x70\x53\x00\x3b\x21\xa7\x9f\xa7\x42\xcb\x78\x29\xf8\xa7\x7f\x2c\xfa\xc0\x3a\x73\x5a\xe3\x00\x6c\x0d\xc7\xe9\x4b\xe3\x51\x0e\x07\x32\x25\xa7\x28\x3b\xff\x9f\x60\xfc\x83\x8d\xfe\xb4\x0b\x5a\x2a\xf2\x62\x90\x51\x88\x02\xd6\x77\x69\x45\x76\x68\x6d\x80\xd6\x8e\xc7\xc3\x41\xb5\x0a\xb8\x35\x48\xad\x02\x0a\x8a\x5c\xea\x29\x3d\xe3\x57\x8c\x0b\x67\xec\xb7\x14\x4e\x47\x75\xf6\x7d\x28\x9e\x3e\x8d\x27\x39\xe2\x63\x77\x58\xbb\xd4\x89\xea\x53\x68\x5b\xf1\x7a\xa9\xf3\xd6\xf3\xb1\xde\x1e\xf2\x15\x79\xd6\xcd\x2b\x72\xe3\xe5\x60\x7d\x10\x16\x66\xf3\xc9\xd9\xf1\xca\x60\x5e\x68\xf9\xa5\x68\xac\xc2\x2e\x5c\x5d\xe7\xce\x4a\x3d\x2d\x99\x67\xad\xd0\x53\x84\x57\x32\x84\x57\xb1\x51\x1d\xa6\x6d\x5e\x20\x0b\x03\x92\x94\x29\x8b\x44\x5e\x1f\xad\x8e\xca\x92\x57\x3c\x6d\x8f\x42\x2f\xd7\xb8\x55\xff\xae\xd8\xdb\x45\x2e\xbc\x44\x96\x4d\x10\x7b\x48\x41\x62\xe2\x62\x86\xda\x09\x27\x8d\x86\xd4\x58\xb8\x33\x8f\xe0\x0c\x64\xd6\x64\x68\xd5\x1c\x8a\x1c\xfb\x70\xb0\xc5\x1e\x22\xdb\x26\xe9\x9f\x2b\x47\x17\x6d\x42\xa6\x60\x60\xb7\x4d\xa7\xba\x6d\xf0\x7e\x1e\x7d\xc2\xc7\x60\x54\x96\xd1\xe9\xfd\xd4\xa3\xb7\x03\xda\x40\x59\xf6\x1a\x31\x85\xeb\x41\x26\x98\x70\x08\x0b\x3e\xed\x88\xf3\xcf\x23\x4d\x40\x2a\x82\x66\xe4\xe4\x0c\x73\x27\x66\xd9\x8d\x97\xba\xb9\x43\x95\xa1\x1d\x41\x04\x95\x97\x6e\x6b\xe4\x37\x63\xee\xeb\xb4\xea\x56\x53\x62\xf6\x30\x35\x16\x7d\x50\x59\x68\xeb\xd2\x7a\x5a\x3c\xed\x69\xc9\xdd\x41\x9b\x8b\xc3\x81\xfe\xcf\x01\xa6\xa2\x50\x8e\x07\x91\x2f\x05\x5a\x89\x79\xf4\xc9\xe8\x7f\xa3\x35\xf5\xd6\x04\x09\xd6\x1a\xf4\x03\xf3\xa8\x5b\xd8\xeb\x48\x5f\x4a\x77\x57\x0b\x87\x60\xc6\xa4\xd6\x17\xc6\x33\x5a\xb7\xac\x53\xd6\xc9\x01\x52\xa8\x83\x85\xee\x31\x21\xfa\x76\x1d\x9e\xb1\xd0\x14\x2c\x0f\x01\x3c\x4a\x77\x07\x02\x1c\x4f\x50\xee\x4e\x38\xa8\xf7\x9b\xda\xa1\x3a\x12\x50\xb0\x66\x88\xd9\x6e\x83\xee\x9b\x37\xb0\x57\x48\x95\x40\x2c\xe2\x3b\x84\x7b\x9c\x83\xd4\xaf\x95\xd4\x08\xc5\x54\x49\x35\x87\xd7\x30\x9b\xe7\x5f\x14\x3c\xe4\x90\xd1\xdf\xcc\x9a\x5b\x85\xb3\x7c\x38\xb8\x2d\x52\x0a\x41\xee\xec\x4c\xe8\xa9\x42\x6a\x72\x7b\x45\x9a\xa2\x0d\xc6\xbc\x1b\x5d\x5a\xe9\x70\xc2\x24\x14\xe4\xce\xc6\x46\x3f\x44\x47\xce\x88\xa0\x97\xe7\xd1\x47\xa9\x13\xa2\x3b\x4a\xbe\x9b\x10\x62\xd2\xea\xe9\xaa\x2f\xb7\x6f\x54\xce\x21\x59\xd6\x1d\xf3\x69\xda\xe5\xbd\xb9\xc3\xe0\xd7\xe8\xd7\xe7\xdc\xe8\xd3\xc0\x7a\x37\xfa\x72\xdf\xe3\xc6\x53\x9d\x9d\xec\xfc\x01\xba\x9a\x94\xdc\xa0\x8a\xb0\xdd\xd9\x05\xda\xad\x37\xc6\xc3\x41\x0b\xde\x69\xd1\x80\x77\x5b\xa4\x63\x2e\xe5\x95\x65\xe1\xcb\x76\x9f\xd2\xe5\xa4\x70\xd1\xf9\xb1\x89\xef\x49\x13\x27\x50\xe8\xf3\x28\x21\x43\xcf\xbf\x7f\x75\x8f\xf3\xeb\xad\x0d\x5d\x68\xe5\x4d\x0d\x07\xd4\x07\x89\x07\xb8\x26\x7c\xf5\xfc\x54\x1b\xa6\x00\x34\xc3\xa7\x45\x47\x8e\xf4\xd1\x3b\xea\x3c\x51\x9d\x0e\x07\x83\x75\x1e\x34\x25\xfa\xbc\x48\x97\x24\xb6\x93\x36\x85\xeb\xbe\xd0\x66\x03\x3d\x8e\x87\x83\x41\xdd\x0c\x77\x76\x97\x8a\xe0\xa2\xf3\xf4\xc7\xfd\x3f\xb5\x72\x26\xec\xfc\x23\xce\x3b\xc2\x14\xe2\x86\x91\xbc\xf1\x0e\x1d\x3d\xdf\x5f\x0a\xed\x99\xc8\x34\x04\xb5\xd4\x6d\x42\x88\x4d\xa1\x12\xe6\xfb\x5b\x26\x9f\xfa\xac\x9e\x9a\x40\xc9\x9c\xbb\x0f\x13\x14\x99\x83\x2e\xc9\x4c\x68\x92\x9e\x65\x0a\xa9\xef\x07\x16\x5d\xd8\xa6\x3f\xbd\xc4\x79\x10\x11\x2f\xcf\x61\xd7\xeb\xf7\x99\x74\x46\x4b\x27\xc4\xca\x41\x22\x85\xc2\xd8\x85\x30\x5a\x72\x6d\xd4\xb4\xe0\xa6\xf7\xb6\x1a\x2d\x7a\x0d\xb0\x0b\xe9\xcc\x45\x93\xcc\x4a\xed\x52\x0e\xff\x68\x72\x78\x7c\xb8\xff\x19\x7e\xce\xe1\xfd\xf9\xef\x27\x74\xde\xe3\xb3\xaa\x5a\xd2\x5d\x96\xd1\xf9\x59\x55\xc1\xe5\x6f\x87\xe7\x87\xf0\x73\x3e\x62\x5c\xfc\x88\x96\x47\xff\x34\x52\x07\xed\x29\x8f\x12\xd4\xee\xac\x30\x0e\x27\x4a\xc6\xd8\x78\x1c\x1d\x9f\x85\xd0\xfc\x3e\x3f\xe3\x14\x1f\x87\x30\x0a\x47\xe3\x46\x5b\xad\xe0\xf2\x0e\x2d\xee\x2b\x51\xe4\xc8\xf8\x90\x43\x23\x7f\xe0\x73\xff\xf3\x6d\x37\x70\x0b\xd8\xfd\x61\x1f\x84\x2a\xf0\x44\x64\x99\xd4\xd3\x90\x4b\xad\x6d\x75\x7b\x52\x27\xf5\xd6\xba\xd6\xf9\x79\x9e\x61\xb8\x8e\x00\x16\x6a\xdb\x08\xd7\xe3\x41\xa7\xad\xf7\xfa\x3a\xb1\x57\x93\x8f\x74\x60\x12\xac\x93\x71\x81\xcd\x4b\x3b\x4b\x76\xc9\xe0\x0a\x57\xfb\xbe\xb2\xb3\x95\xef\xae\x1c\x46\xa6\x69\x4c\x19\xb2\x23\x9d\x48\x8b\x31\xe5\xad\x5f\xf8\x17\x49\xfc\x9e\x06\x86\x1a\xcf\x83\x50\xbd\xa1\x82\x37\xf3\xf7\xd6\xcc\x9a\x23\xb0\xc2\x9a\x64\x7b\x20\x8d\x3d\x29\x7a\x4f\x72\xb8\xba\x96\xda\xa1\x4d\x45\x8c\x65\xb5\x98\x2e\x96\x83\xd5\x09\x64\xf3\x62\x6b\xfc\xd4\xd9\xf5\xa6\x3b\x3a\xfc\x49\x65\xea\xc7\xd3\x03\xbc\x2d\xa6\x27\x26\x41\xd6\x7a\x13\xc2\x4d\x5d\x2f\xef\xb9\x5e\x94\x0e\x5a\x31\xee\x51\xb6\x51\xc9\x15\x3b\xde\xfa\x25\x8a\xd5\x62\x42\x7d\x15\x0b\x7d\x2c\x72\xe7\xb9\xfd\xe8\xa0\x7b\xbb\x59\xda\xa9\x6f\x39\x7c\xc7\x59\xb5\x35\x58\x1a\xf2\xfd\xaa\xc5\x9c\xe7\xbf\x7a\x88\xa5\x51\x94\x47\xfe\xa0\xe3\xbb\xf7\x29\x8a\xa2\x31\x6b\xa1\x7b\xc0\xe6\x97\x6b\x0b\x01\xcf\xb9\x1b\x14\xd5\xd7\xac\x9e\xce\xd5\x6e\xde\x34\xe9\xff\x6d\x0e\x3e\x7d\xed\xdb\x5d\x6b\xc6\xee\x15\x05\xd2\x6f\x18\x74\xc5\xa5\xfb\xad\xe7\xa2\x4d\x6d\x83\xe6\x9c\x65\x7e\x5e\x40\xbe\x16\x40\x2a\x03\x45\xab\x07\x20\xb5\xfb\xfb\xdf\x7a\xce\xd1\xa6\x9f\x83\x4f\x44\x06\x57\xd7\x45\x2d\x42\xeb\x0d\x19\xf2\x78\xd7\x2f\xa0\x0d\x15\xb4\xe8\x8b\x53\xe3\x0c\xf0\xb4\x52\xdf\x7c\x9e\xf5\xd4\x7b\xd9\xc4\xde\x67\x49\xd4\x11\x4b\x68\xac\x5a\x1b\xce\x43\x6b\x27\x73\x1d\xbf\x17\x52\xb5\x65\x60\x14\x7f\x37\xe5\xa1\x27\xc1\xaf\x4d\x11\x9c\x7e\xc4\xf9\xe2\xce\xfc\xb6\x85\x6c\xe9\x4b\x00\x7f\xa4\xe2\x16\xbc\xd0\xd4\x13\xfd\x2c\x9d\xf2\xb3\x5d\xcd\x95\x4b\xd2\x24\x6b\x22\xef\x87\x97\xad\x2a\xe0\x41\x30\x36\x2a\x22\x9e\xad\xaa\xc0\x9f\xda\x9f\xac\xc6\x89\x59\xe8\x97\x5f\xd6\x47\xf8\xaf\xb4\xbb\xbc\x73\xf5\xf6\x9a\xf6\x36\x13\xf7\xd5\xa8\x0d\x4b\x55\x8d\xae\xd7\x43\xd5\xbb\x3a\x2e\x72\xe4\xc5\xfa\x49\x77\x66\xf9\x01\x25\x63\xd1\x59\x89\x0f\xd8\xdc\xf2\x98\xad\xf3\x35\x25\x04\x74\xdc\x5e\xba\x6f\xea\x39\xdb\xf4\xae\xb0\xad\xaa\xf1\x0f\xe9\x06\xcd\xb4\xb5\x7d\x43\xe8\x9e\xc7\x13\xd4\xa2\xfc\x96\x69\xb2\x43\x76\x6c\xe4\xdc\x3c\x06\x7d\xb3\x4f\xd5\x45\x93\x58\xf0\xf4\x41\x6d\xd2\xeb\xef\x52\xe8\x0a\x95\x2b\x38\xf4\x5b\xd5\x37\xf4\xfa\x03\x12\x24\x33\x59\xc1\x9f\x70\x12\x7f\xcf\xd8\x9c\x21\x14\xbb\x6e\x81\xec\x3c\xb9\x63\x6d\x77\x69\x6b\x2e\x87\x5b\x88\xf3\x65\x10\x76\x7d\xa4\xb6\x36\xb0\xb8\x14\x0e\x36\x7c\x7d\x5a\xfc\x23\x25\x31\xef\x52\x87\xf6\xbb\xbe\x3c\xd5\x04\xd1\xe9\xea\xac\x54\x13\xfd\x76\xbf\x80\xfe\x2f\x00\x00\xff\xff\xf5\x14\xaa\xd5\xff\x1a\x00\x00")

func templates17_upsertGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templates17_upsertGoTpl,
		"templates/17_upsert.go.tpl",
	)
}

func templates17_upsertGoTpl() (*asset, error) {
	bytes, err := templates17_upsertGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/17_upsert.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x4b, 0x11, 0x29, 0xcf, 0x1a, 0x47, 0x9b, 0x43, 0xcb, 0x57, 0xeb, 0x56, 0x5f, 0xfa, 0x4c, 0x76, 0x14, 0x8a, 0xc8, 0xc5, 0xc9, 0x8f, 0x48, 0xf, 0x8f, 0xbf, 0x58, 0xe5, 0x1f, 0xd5, 0x5a, 0x98}}
	return a, nil
}

var _templatesSingletonMysql_upsertGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\x4d\x8f\xd3\x30\x10\x86\xcf\xf6\xaf\x18\x22\xad\x9a\x48\x56\x96\xbd\x22\xe5\xb0\x4b\xcb\x2a\x50\xfa\x5d\x10\x42\x68\xe5\xd6\xe3\xd6\x52\xea\x14\x7f\x14\x2a\xd4\xff\x8e\x9c\xba\x6d\x16\x8a\xc4\x61\x2f\x89\x93\x99\x79\x3d\xcf\xcc\x7b\x7b\x0b\x0b\xaf\x2a\x31\xdf\x5a\x34\x6e\xec\xd1\xec\x3f\xee\xa7\xe3\xfe\xf1\xaf\x05\x0e\xe1\xc3\x3a\xee\x70\x83\xda\x81\x75\x46\xe9\x15\x78\x1b\x9e\x6e\x8d\xe0\x9b\xc2\x2e\x77\x1c\xb6\xa6\xde\x29\x81\x22\xa7\xd2\xeb\xe5\x75\xdd\x54\x28\x0e\xc2\xa8\x1d\x1a\x9b\x77\x15\xaf\x70\xe9\x18\x38\xbe\xa8\x70\xc0\x37\x18\xf5\x19\xf8\xad\xe0\x0e\x19\xfc\x58\x2b\x87\x95\xb2\x0e\xbe\x7e\x3b\xc6\xb2\x53\x0f\xbf\x28\xb9\x44\x8b\xf0\x77\xc3\xf5\xaa\xc2\xbc\x14\xa8\xdd\xd8\xd7\x0e\xa7\x95\x5a\x62\xb8\x32\xef\x8f\x19\x84\xf7\x64\xdc\xd2\xcc\x28\x25\x0b\x2f\xe1\x4d\xbb\xfa\x11\xdd\x83\x97\x12\x4d\x9a\x51\x22\x50\xa2\x69\x05\x47\xfe\x14\x5c\x78\x19\xca\x77\xdc\xc0\xb2\xae\xfc\x46\xdb\xd8\x17\x25\x4a\x42\x85\x3a\xbd\x5c\x03\xaf\x0a\x78\x1d\xfa\x25\xa7\xd4\x22\x26\xdb\xfc\x7d\xad\x5a\xa9\x0c\x12\x06\x49\x46\xc9\x81\x9e\x75\x8e\xa3\xc8\xa0\x38\x89\x3c\x31\x78\x82\x02\xe4\xc6\xe5\xef\xb6\x46\x69\x27\x53\x4a\x48\x20\x61\xe1\x9d\x94\x83\x69\x6f\x32\x83\xf2\x71\x30\x9c\xf4\xa0\x1c\xcc\x86\x70\x63\x21\xbd\xb1\x19\x7c\xba\xef\xcf\x7b\xd3\xe6\x9c\x34\xc9\xe7\xc9\x37\x5f\xb1\xbd\xe6\xdc\x82\xae\xf8\x12\xd7\x75\x25\xd0\xd8\x66\x98\x73\x8b\xa5\x16\xf8\xb3\x1d\x60\x7f\x30\x33\xb8\x63\x70\x97\x05\xa9\x8c\x12\x62\xd0\x79\xa3\x61\xe1\x65\x3e\x6d\xc8\xd3\x08\x79\x1d\x26\xb2\x9c\x51\xfe\xc1\x00\xc3\x01\x74\xe7\xa3\x7e\xf9\xf6\x7e\xd6\x83\x0f\xbd\x2f\x30\x1f\x75\xc3\xb1\x81\x7b\xc6\xd6\x42\x7b\x31\xb2\x60\x00\x59\x1b\x50\x0c\x76\xc1\x44\x86\xeb\x15\x46\xeb\x36\x9b\x52\x12\xd4\x65\xf9\x81\x2a\xff\x6c\x94\xc3\x87\xbd\xc3\xb4\xc3\x3a\x61\x32\x07\x4a\xc8\xf7\x60\x56\xf1\xdc\x87\x17\x17\xff\x65\xe0\x5d\x46\x5b\x62\x71\x9e\x47\x8d\x6b\x91\x04\x8a\x38\xb4\x34\xf9\xcf\xca\x63\x83\x59\x27\x2e\xe9\xda\xf6\x0e\xf4\x77\x00\x00\x00\xff\xff\x8e\x2d\xd5\x58\x3c\x04\x00\x00")

func templatesSingletonMysql_upsertGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesSingletonMysql_upsertGoTpl,
		"templates/singleton/mysql_upsert.go.tpl",
	)
}

func templatesSingletonMysql_upsertGoTpl() (*asset, error) {
	bytes, err := templatesSingletonMysql_upsertGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/singleton/mysql_upsert.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x89, 0x5d, 0xfa, 0x9f, 0x2f, 0x10, 0x9b, 0xa9, 0xf7, 0xa1, 0xd1, 0xd3, 0x95, 0xaf, 0x90, 0x56, 0x83, 0x72, 0xd9, 0xe4, 0xf6, 0xc9, 0xe8, 0x87, 0xc5, 0x82, 0x37, 0xfd, 0x9a, 0x99, 0x62, 0x34}}
	return a, nil
}

var _templates_testSingletonMysql_main_testGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\x5b\x4f\xdc\x48\x16\x7e\xb6\x7f\xc5\xd9\x96\x98\xb5\x19\x53\x8c\x34\xd2\x3e\x30\xb2\x50\x68\x9a\x11\x9a\xe1\x92\x6e\x76\xa3\x55\x88\x92\xc2\x3e\x0d\xa5\xd8\x55\xa6\xaa\x4c\xd3\x8b\xf8\xef\xab\x53\xe5\x5b\x07\xdc\x22\xab\xec\xdb\x3c\x25\xae\xf3\xd5\xb9\x7c\xa7\xce\xa5\x79\xe0\x1a\xf4\xed\xe3\xd9\x7a\xf1\xfe\xcf\xaf\xb8\x86\x14\x34\xde\xe2\x63\xc5\xce\x6a\x63\xa7\xaa\xac\x44\x81\xd1\x97\xe8\xb0\x8c\xa3\x28\xb9\x96\xf1\xe1\xb5\xf9\x79\x7a\x71\xbe\xb8\x9a\xbf\x3b\x3d\xbf\x62\xbb\x87\x27\x17\xf3\xd9\xe9\xef\xe7\xf0\xc7\xec\xdf\x6c\xf7\xf0\x5a\xc6\x3f\x7f\x89\xc3\xd0\xae\x2b\x84\x72\x6d\xee\x8b\x2b\x34\x16\x35\x18\xab\xeb\xcc\xc2\x53\x18\xe4\x37\x53\x25\x25\xec\x9a\xfb\x82\x1d\x1f\x85\x74\x70\xce\x4b\x0c\x8c\xd5\x42\xde\x86\xc1\x9d\x32\xb6\xfb\xa8\x0d\xea\xee\xa3\xe2\xc6\x74\x1f\xc6\x14\xa5\xca\xfb\x6b\x95\xd2\x36\x10\xd2\x86\x61\xa0\x2a\x2b\x94\x3c\x11\x05\x42\x23\x0d\x03\x8b\xc6\x1e\x1f\x91\xa1\xf6\xec\x39\x0c\x97\xb5\xcc\x40\x48\x61\xa3\xd8\x7b\x76\xc6\x85\x84\x14\x7e\x1a\x78\xfe\xf4\xdc\x21\xa3\x12\x76\x07\x92\x18\x0c\xda\xba\x8a\x62\x40\xad\x95\x26\x0d\xc4\x26\x6a\xed\x0f\xc2\x30\x78\x10\x15\x6a\xb6\x40\x7b\x8c\x4b\x5e\x17\x36\x9a\xb8\xfb\xac\x71\x7e\x92\xc0\xc4\xea\x1a\x27\xf1\x38\x94\xe2\x9a\x24\xf0\xeb\xaf\xbf\xfc\x23\x0e\xc3\xa0\x64\x9e\x2e\x48\xc1\xdf\xf8\x1d\xed\xc2\x05\xd4\x5e\xc8\x6f\x24\x2f\x9d\xca\x92\x11\x97\xe3\x48\x92\x7a\x1c\xd1\x3c\x8e\x23\xa9\xc7\x51\x06\xc6\x71\x24\x6d\x70\x4a\x6f\xd8\x3d\x95\x9b\xf1\x38\x50\x43\xc2\xb8\xbe\x96\x25\x8a\x9b\x58\x4d\xe1\x81\x17\x9c\x1d\xe1\xad\x90\xff\xe2\x85\xc8\x39\xe5\x39\x8a\x59\xf3\x81\x51\x18\x04\x0e\xe2\xf5\x9c\x2b\x3b\x2b\x2b\xbb\x8e\x7c\x80\x09\x6c\xc4\x93\x8c\x82\x89\x97\x0e\xec\x49\xea\xc0\xe7\xca\x46\xee\x3f\xb3\xfb\x9a\x17\x26\xf2\xb1\x26\xf0\x4b\x77\xc1\x07\xb8\x45\xbd\x4f\x60\x87\x6f\xf3\x35\x7e\xa1\xe1\xa1\xbb\xd1\xf1\x92\x84\x41\xcc\xa6\x77\x98\x7d\x8d\x88\x23\xb1\x74\x8f\xef\x6f\x29\x48\x51\xd0\x73\x0c\x34\xda\x5a\x4b\x3a\x0d\x83\xe7\x30\x0c\xf6\xf7\x61\xaa\x91\x5b\x04\x0e\x9a\xcb\x5c\x95\xe2\x3f\x98\x43\x7e\x03\xe4\x03\xa3\xac\x0c\x0a\x25\xed\x31\x6c\x61\xf9\x4d\x81\x5e\xd0\xc5\x30\x30\x9a\x42\xc9\x4a\xfe\x15\x2f\xba\xda\x8b\xe2\xdf\xc6\xdd\x51\xda\xb0\x0f\x9a\x57\x11\x6a\xca\x4b\xa6\xea\x22\x97\x7f\xb7\x40\x2a\xc0\xd7\x2f\x2c\x45\xe1\x9e\xf1\xf3\xa6\x95\x5c\xab\xea\xca\x39\xb9\xd5\x02\xdd\x1b\x5e\xcb\x5c\xdc\x6f\xbc\x18\x06\x79\x5d\x56\xd3\x32\x87\x83\x14\xf0\x11\x33\x36\x55\x65\xc9\x65\xde\x3c\x4d\x92\x4e\x12\x72\xc6\x17\xab\xf1\x01\x27\x30\xd9\xdb\x93\x6a\x2f\xe7\x96\x7b\x71\x43\x53\xe0\xad\x8f\x2b\x1c\x53\x46\x9a\x6e\xb8\x41\x27\xef\x53\x43\xc4\xeb\x04\x56\xa4\x4d\x28\x76\x29\x2a\x8c\xe2\xce\x69\xb6\xb0\xb9\xaa\xa9\x00\x57\x03\xcb\x74\xea\xba\x9b\xc4\xd5\xc9\x1f\xb8\x3e\x46\x63\xb5\x5a\xa3\x8e\x06\xfd\x3f\x01\xbd\x91\xd4\x5e\x23\xd7\xf6\x7b\x32\xba\xe4\xa2\xc0\x1c\xac\x02\x43\x57\xa1\xa3\x0d\x32\x1f\xb8\xcf\x6c\x6f\x69\xe8\xe7\x8f\xb0\xb5\x69\xe7\x95\x90\x3e\x70\xf1\x9a\x95\x65\x69\xd9\xa5\x16\xd2\x16\x92\xd4\xc7\x6f\x33\xbc\xe2\xc2\xc2\x52\xe9\xb1\x38\xc3\x60\xc5\xa6\x85\x32\x18\xc5\xb0\xbf\x0f\xef\x96\x34\x13\xdb\x37\x26\x0c\xe4\x4a\x62\x02\x19\x21\xc0\xde\x21\xac\xb4\xb0\x08\x28\x73\x50\x4b\x77\x50\x89\x0a\xc3\x57\xe9\xfa\x3f\xc6\xf1\x6d\x0c\x8d\x02\x29\x8a\x2d\x33\xd1\x14\x67\x2a\xc7\xc8\xb5\x76\x3f\x6a\xe3\xe6\x5f\xf2\xcb\xac\x84\xcd\xee\xc0\x49\x9f\xc2\x20\xe3\x06\x9b\x19\x78\xd0\x7b\x38\x99\xcf\xde\xff\xf3\x74\x3e\x3b\x9e\xb4\x88\x25\x2f\xcc\x26\xe4\xf8\x74\xf1\xee\xe8\x4f\x07\x69\xea\x66\x28\xbd\x9c\xcf\x4e\x66\x73\xaf\x61\xcb\x00\xdf\xac\xb8\x81\x9b\x8d\x1e\x22\x71\x51\x11\x8b\xcb\x88\xaa\xb1\x81\xef\x51\x6b\x4a\x77\x8c\xab\xca\x7e\xdb\x88\xc7\x0d\x7d\xdb\x1a\xfb\x95\xc1\x96\x55\xe2\x72\xe7\x4a\xb9\xb6\xa2\x60\x57\x58\x56\x0e\x36\xa1\x05\xc1\xeb\x6f\x9b\xe1\xb6\x1e\x3f\x9a\x55\xff\x58\x5e\xed\xab\xe6\x6a\x7a\x49\xa6\x1d\xc1\x61\xf0\x39\x69\xde\x97\x32\x54\x87\xb6\x99\x86\xde\xb0\x32\xec\xd4\xd0\x5c\x7a\x14\xc6\xba\x47\xe5\x1c\xf0\x3a\x52\xa0\x2c\x86\xc1\x33\x60\x61\x10\xbe\xc3\x4f\xd7\xfc\x41\x2a\x4b\xe5\x6b\xa1\xec\xf6\x12\x72\xf0\x73\x02\x9f\x21\x75\x89\x38\xa9\x9a\xe7\xec\x28\x9b\x7c\xcc\x0a\x81\xd2\x7e\x22\xe4\x0b\xd4\xb2\x01\x91\xaa\x74\xc7\x5c\x4b\x97\xaa\x26\x94\x51\x34\x8d\xee\x74\x27\x6f\xd0\xf4\xb5\x0d\x4d\x6b\x44\xaf\x9b\xbe\xb6\xea\xe6\xc6\xac\x94\xce\xfb\x1b\x74\xb2\xed\x86\x31\xc5\x1e\xd5\x49\x7f\xa3\xab\xad\x76\x05\x88\x7d\x62\x7c\x06\x88\xe4\x71\xba\x2a\xad\xac\xca\x54\x91\xda\xac\x7a\x03\xb9\x5d\x1f\xfb\x8b\xdf\xff\x9d\xdf\x61\x73\xa0\x02\x29\x2b\xe6\xf6\xa7\xb8\xef\xa5\x74\xd6\x0c\x86\xf1\xee\xb1\xb9\xbb\xf4\xbd\x83\x5a\xf4\x41\xba\xd9\xa5\x9a\x5a\x6f\x17\x07\xd8\x31\xbf\xbd\x58\x1e\x5a\xe3\x25\xd3\xb5\x9c\x96\x79\x64\xee\x8b\x76\xbb\x9c\x6c\xf1\x63\xb8\x7a\x6d\xf7\x82\x90\xbd\x0f\xd4\x0c\xa8\x67\x98\x1f\xea\x8d\x45\xae\x73\xb5\x92\x43\x5f\xc4\xd2\x6d\x5d\xee\x17\xe6\xa0\xf7\xb4\x67\x1d\xd5\xc3\x95\xe0\xe0\x3b\xb7\xca\xce\x61\x65\xd8\x1c\x4b\xf5\x40\x0f\xe6\x4d\x53\xa0\x8d\x8f\x16\xb1\xa4\x1d\xae\xcd\xd4\x49\x80\xeb\x5b\x03\x8c\xb1\x76\x68\x76\x41\x39\x41\x0a\xbc\xaa\x50\xe6\xd1\xc7\x4f\x1e\xf0\xf4\xed\xc2\xf8\xec\x55\x30\xc6\xe8\x7d\x65\xaf\xec\x9a\x8d\xc5\x01\x8e\x60\xdd\x62\xe8\xf5\x1a\x76\x8e\xab\x39\xf2\x1c\xb5\xf7\x94\xb4\x19\xbf\x51\x1e\xa4\xf0\xd3\xcd\xda\xa2\x61\x47\xf5\x72\xe9\x7e\x1c\x93\xa8\x61\xf1\x85\x28\x1b\xee\xa2\x5e\x45\x77\xe8\xc7\x8c\xbf\x3c\x4c\x05\x89\xe7\xb5\x7c\x99\x85\xe1\x42\xd3\xce\x36\x5d\x4b\x29\xe4\xed\xc1\xa4\x63\xd3\xc7\x16\x6f\xc2\xbd\xe9\xe6\x87\x55\x14\xbf\x94\xa2\xd6\x43\xe9\x48\xbe\xb7\xee\x3d\x99\x92\xf4\x12\xa3\xe6\xef\x1a\x89\x4f\x5f\x3c\xfe\x28\xbb\x57\xef\x25\x89\x53\xef\xcc\x6d\xfe\x15\x21\xe8\x11\x0d\x67\xf7\x05\xbb\xa8\x50\xf6\x3f\x1d\x72\x2d\x1e\x50\x33\xb7\xc4\x1f\xd5\xa2\xc8\xdf\xd7\xa8\xd7\x4d\x40\xed\x8f\x5f\xdf\x10\x37\x8b\xaf\x6d\xda\x6d\x3b\x6e\x9a\xe0\xa0\xf5\x6d\xe6\xa0\x27\x22\x79\xc1\xce\x66\x20\xcf\xe1\x7f\x03\x00\x00\xff\xff\x6b\x33\xd7\x37\x5a\x12\x00\x00")

func templates_testSingletonMysql_main_testGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templates_testSingletonMysql_main_testGoTpl,
		"templates_test/singleton/mysql_main_test.go.tpl",
	)
}

func templates_testSingletonMysql_main_testGoTpl() (*asset, error) {
	bytes, err := templates_testSingletonMysql_main_testGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates_test/singleton/mysql_main_test.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x40, 0xf9, 0x56, 0xa2, 0xce, 0xc9, 0x19, 0xa7, 0x1a, 0x97, 0xcf, 0x9c, 0x71, 0x72, 0xc0, 0x2e, 0x9a, 0x52, 0x8e, 0xf5, 0x94, 0x69, 0x69, 0x9f, 0x2d, 0xe3, 0xe5, 0xd2, 0x87, 0xf, 0x1b, 0x7b}}
	return a, nil
}

var _templates_testSingletonMysql_suites_testGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\xc1\x0a\xc2\x30\x10\x44\xef\xfd\x8a\xa5\xe4\xd0\x4a\x9b\x0f\x10\x3c\x78\xd4\x83\x88\xb4\x1f\x10\xed\xb6\x04\xe2\x5a\xba\x5b\x10\x42\xfe\x5d\xd2\x46\xe9\xc1\xdb\x0c\x6f\x32\x99\xed\x67\x7a\x40\x83\x2c\xed\xc8\x38\x49\x21\xb0\x13\x64\xb1\x34\xe8\xa6\x04\x9f\x01\x78\x5f\xc3\x64\x68\x40\x50\x96\x3a\x7c\x57\xa0\xc4\xdc\x1d\xc2\xfe\x00\xba\x89\x8a\x43\x48\x39\xdb\x27\xa8\x4f\x7c\x7e\x59\x5a\x30\xd4\x3f\x8e\x8e\xb7\x56\x19\x67\x0d\xc7\x22\xa5\x8f\x51\x22\xaf\x8d\xdf\x96\x8b\x79\xe2\x92\x16\x7d\x9b\xa9\xc8\xbd\x5f\x9f\xe8\x76\xbc\xba\x79\x32\x2e\x84\xbc\x82\x38\xf8\x0f\x59\x2f\x2a\x97\xbf\x90\xba\xed\x8c\xe4\x42\xf6\x09\x00\x00\xff\xff\x11\x5d\x4c\xce\xff\x00\x00\x00")

func templates_testSingletonMysql_suites_testGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templates_testSingletonMysql_suites_testGoTpl,
		"templates_test/singleton/mysql_suites_test.go.tpl",
	)
}

func templates_testSingletonMysql_suites_testGoTpl() (*asset, error) {
	bytes, err := templates_testSingletonMysql_suites_testGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates_test/singleton/mysql_suites_test.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x10, 0xc4, 0x71, 0xaf, 0xd9, 0x16, 0x41, 0x8b, 0x4b, 0xfc, 0xe8, 0xba, 0xfd, 0xfa, 0x4d, 0x2c, 0x1, 0xd1, 0x0, 0xe1, 0xb0, 0x78, 0xee, 0x7f, 0xd0, 0x65, 0xf3, 0xa1, 0x43, 0xba, 0x3c, 0xe7}}
	return a, nil
}

var _templates_testUpsertGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x54\xcd\x6e\xdb\x3c\x10\x3c\x8b\x4f\xb1\x9f\xf1\xb5\xa0\x0a\x85\x69\xaf\x29\x7c\xc8\xdf\x21\x68\x6b\xb8\xb1\x7c\x2e\x18\x69\xe5\x10\xa6\x49\x95\x5c\xd5\x76\x05\xbe\x7b\x41\xc9\x76\x9c\xd8\x69\x73\x68\x0f\x39\xf8\x87\x8b\xd9\x9d\x99\x5d\x2e\xdb\xf6\x04\xfe\x97\x5a\x49\x0f\x67\x43\x10\xe7\xf1\x1f\x7a\x91\xcb\x3b\x8d\xd0\xff\x88\x91\x5c\x60\x08\xac\x6a\x4c\x01\x84\x9e\xda\xb6\xcf\x10\xd3\x7a\xac\x1b\x27\x75\x08\xd3\xda\xa3\x23\x4e\xf0\x2e\x02\x94\x99\x89\x3c\x85\x96\x25\x24\xc6\xd2\x49\xad\x51\xf3\x94\xb1\x44\x55\xa0\xd1\xf0\x5d\x81\x2b\xbb\x34\x13\x65\x66\x8d\x96\x2e\x84\x4b\xab\x9b\x85\xf1\x29\x0c\x87\xbf\x83\x8d\x9d\x5a\x48\xb7\xfe\x84\xeb\x5d\x42\xcb\x92\x84\xc4\x64\xae\x6a\x3e\x88\xdf\xb5\x32\x33\xa0\xce\xc3\x52\xd1\x3d\x58\xa3\xd7\x50\xf7\x79\x30\xc7\x35\x14\x7d\xe6\x20\x65\x49\xd8\xc9\x5a\xac\x27\x5f\x3f\xef\x99\x7b\xa0\x9c\x1a\xf5\xbd\xc1\x7d\x7d\xef\xff\xc8\x69\x2c\x34\x5d\xda\x96\x0c\xc8\x42\x61\x4d\xa5\x55\x41\x60\x4d\xcf\xcd\x12\x8f\x58\xc6\xde\x3b\x69\x4a\xbb\x50\x3f\x51\x8c\x70\x39\x41\x2c\x79\xca\x92\x1f\xd2\x01\xba\xee\x63\x1d\x4b\x4e\x4f\xe1\x9c\x08\x17\x35\x01\xdd\x23\xdc\x8c\x26\xd7\xb7\x39\x78\x55\x22\xd8\x0a\xa4\x81\xe9\x38\x46\x58\x62\x63\xc5\xa3\x56\xda\xde\x6f\x2c\xba\xcf\x39\x21\xd7\x14\xc4\xa3\x98\x0c\xde\xda\x0c\x9e\x69\xfe\xd5\x45\xbe\xae\xd1\x67\x50\x49\xed\x31\xfd\xd8\x15\xfa\x6f\x08\x46\xe9\x4d\x47\xae\xa3\xd4\x8a\x0f\xa6\xa6\xeb\x05\xd9\x07\x96\xe3\x8a\xc0\x77\xdc\x67\xf0\xc6\x0f\xb2\x58\x6f\xd3\x98\xb6\x55\x15\x18\x4b\x20\x46\xf6\xd2\x1a\xc2\x15\x85\x50\xd0\x2a\x5a\x2b\xfa\xb3\xb8\x90\xc5\x7c\xe6\x6c\x63\x4a\x9e\xb6\x2d\x9a\x32\x04\x96\xf4\x90\x2f\x8d\xa7\x7c\xc5\xbb\x2a\xfb\x15\x0e\x02\x77\x56\x69\x71\x81\x33\x65\xba\x1a\xda\xe3\x7e\x2c\x5f\xf1\x82\x56\x59\x34\xb8\x65\x78\x11\x28\x65\x49\x89\x15\x3a\x88\x6b\xc3\x53\x68\xe1\x1b\x0c\x81\x56\xe2\xd6\x6a\x7d\x27\x8b\x39\x4f\x21\xc4\x11\xef\x86\x61\xc5\x66\x8b\x9e\x33\x1e\x87\x82\xa6\x84\x93\x10\x20\x9e\x3a\xfe\x1b\x53\xa1\xe3\xe9\xe3\xd3\xcb\xe6\xd2\x74\x74\xc7\x87\x72\x30\x8d\xc2\x36\x86\xba\xc0\x93\xab\xb5\x7d\x02\x78\x2a\x2e\x23\xe6\x85\xf2\x1f\x9c\x1f\xaa\xe4\x5b\xda\x08\xe9\x88\x23\xe8\xc3\x23\xc8\x60\x29\x4d\x5c\x23\x04\x87\x85\x75\x65\x06\x33\x4b\x67\x83\xac\xc7\x6f\x44\x3f\xd9\x97\xe9\xf8\xea\x3c\xbf\x3e\xb6\x2f\x7f\x6d\x23\x9e\x85\x1d\xbc\x5a\x42\x88\x7f\xba\x3e\xaf\xef\x5e\xbd\x92\x6b\x15\xd8\xaf\x00\x00\x00\xff\xff\x05\xd5\xa1\x1c\x35\x07\x00\x00")

func templates_testUpsertGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templates_testUpsertGoTpl,
		"templates_test/upsert.go.tpl",
	)
}

func templates_testUpsertGoTpl() (*asset, error) {
	bytes, err := templates_testUpsertGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates_test/upsert.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xdb, 0x92, 0xf5, 0x7f, 0x80, 0xcc, 0x1f, 0xaf, 0x82, 0xb2, 0x12, 0x19, 0x6, 0xd4, 0x69, 0xc3, 0x57, 0xe4, 0x53, 0x13, 0x49, 0x4c, 0x87, 0xe7, 0xd9, 0xe0, 0xe1, 0xe6, 0xf5, 0x6c, 0x40, 0x20}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/17_upsert.go.tpl": templates17_upsertGoTpl,

	"templates/singleton/mysql_upsert.go.tpl": templatesSingletonMysql_upsertGoTpl,

	"templates_test/singleton/mysql_main_test.go.tpl": templates_testSingletonMysql_main_testGoTpl,

	"templates_test/singleton/mysql_suites_test.go.tpl": templates_testSingletonMysql_suites_testGoTpl,

	"templates_test/upsert.go.tpl": templates_testUpsertGoTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"17_upsert.go.tpl": &bintree{templates17_upsertGoTpl, map[string]*bintree{}},
		"singleton": &bintree{nil, map[string]*bintree{
			"mysql_upsert.go.tpl": &bintree{templatesSingletonMysql_upsertGoTpl, map[string]*bintree{}},
		}},
	}},
	"templates_test": &bintree{nil, map[string]*bintree{
		"singleton": &bintree{nil, map[string]*bintree{
			"mysql_main_test.go.tpl":   &bintree{templates_testSingletonMysql_main_testGoTpl, map[string]*bintree{}},
			"mysql_suites_test.go.tpl": &bintree{templates_testSingletonMysql_suites_testGoTpl, map[string]*bintree{}},
		}},
		"upsert.go.tpl": &bintree{templates_testUpsertGoTpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
